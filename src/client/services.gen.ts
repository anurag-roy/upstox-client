// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ConvertPositionsData, ConvertPositionsResponse, GetPositionsResponse, GetHoldingsResponse2, ModifyOrderData2, ModifyOrderResponse2, PlaceOrderData2, PlaceOrderResponse2, GetTradesByOrderData, GetTradesByOrderResponse, GetTradeHistoryResponse, GetOrderBookResponse2, GetOrderDetailsData, GetOrderDetailsResponse, CancelOrderData2, CancelOrderResponse2, TokenData, TokenResponse2, AuthorizeData, AutoLoginData, LogoutResponse2, GetProfileResponse2, GetUserFundMarginData, GetUserFundMarginResponse2, GetTradeWiseProfitAndLossMetaDataData, GetTradeWiseProfitAndLossMetaDataResponse2, GetTradeWiseProfitAndLossDataData, GetTradeWiseProfitAndLossDataResponse2, GetProfitAndLossChargesData, GetProfitAndLossChargesResponse2, GetOptionContractsData, GetOptionContractsResponse, GetPutCallOptionChainData, GetPutCallOptionChainResponse, GetExchangeTimingsData, GetExchangeTimingsResponse, GetMarketStatusData, GetMarketStatusResponse2, GetHolidaysResponse, GetHolidayData, GetHolidayResponse2, GetFullMarketQuoteData, GetFullMarketQuoteResponse2, GetMarketQuoteOhlcData, GetMarketQuoteOhlcResponse, LtpData, LtpResponse, GetHistoricalCandleDataData, GetHistoricalCandleDataResponse, GetHistoricalCandleData1Data, GetHistoricalCandleData1Response, GetIntraDayCandleDataData, GetIntraDayCandleDataResponse, GetPortfolioStreamFeedData, GetPortfolioStreamFeedAuthorizeData, GetPortfolioStreamFeedAuthorizeResponse, GetMarketDataFeedAuthorizeResponse, GetTradeHistory1Data, GetTradeHistory1Response, GetBrokerageData, GetBrokerageResponse2 } from './types.gen';

export class PortfolioService {
    /**
     * Convert Positions
     * Convert the margin product of an open position
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConvertPositionResponse Successful
     * @throws ApiError
     */
    public static convertPositions(data: ConvertPositionsData): CancelablePromise<ConvertPositionsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/v2/portfolio/convert-position',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Authorization Failure',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Positions
     * Fetches the current positions for the user for the current day.
     * @returns GetPositionResponse Successful
     * @throws ApiError
     */
    public static getPositions(): CancelablePromise<GetPositionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/portfolio/short-term-positions',
            errors: {
                400: 'Bad Request',
                401: 'Authorization Failure',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Holdings
     * Fetches the holdings which the user has bought/sold in previous trading sessions.
     * @returns GetHoldingsResponse Successful
     * @throws ApiError
     */
    public static getHoldings(): CancelablePromise<GetHoldingsResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/portfolio/long-term-holdings',
            errors: {
                400: 'Bad Request',
                401: 'Authorization Failure',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class OrderService {
    /**
     * Modify order
     * This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren't sent, the default will be considered from the original order
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ModifyOrderResponse Successful
     * @throws ApiError
     */
    public static modifyOrder(data: ModifyOrderData2): CancelablePromise<ModifyOrderResponse2> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/v2/order/modify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'UDAPI100010 - Unknown order id | order request rejected',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Place order
     * This API allows you to place an order to the exchange via Upstox.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PlaceOrderResponse Successful
     * @throws ApiError
     */
    public static placeOrder(data: PlaceOrderData2): CancelablePromise<PlaceOrderResponse2> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/order/place',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get trades for order
     * Retrieve the trades executed for an order
     * @param data The data for the request.
     * @param data.orderId The order ID for which the order to get order trades
     * @returns GetTradeResponse Successful
     * @throws ApiError
     */
    public static getTradesByOrder(data: GetTradesByOrderData): CancelablePromise<GetTradesByOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/order/trades',
            query: {
                order_id: data.orderId
            },
            errors: {
                400: "UDAPI1010 - Order id accepts only alphanumeric characters and '-'.<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get trades
     * Retrieve the trades executed for the day
     * @returns GetTradeResponse Successful
     * @throws ApiError
     */
    public static getTradeHistory(): CancelablePromise<GetTradeHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/order/trades/get-trades-for-day',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get order book
     * This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
     * @returns GetOrderBookResponse Successful
     * @throws ApiError
     */
    public static getOrderBook(): CancelablePromise<GetOrderBookResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/order/retrieve-all',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get order history
     * This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
     *
     * The order history can be requested either using order_id or tag.
     *
     * If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.
     *
     * If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
     * @param data The data for the request.
     * @param data.orderId The order reference ID for which the order history is required
     * @param data.tag The unique tag of the order for which the order history is being requested
     * @returns GetOrderResponse Successful
     * @throws ApiError
     */
    public static getOrderDetails(data: GetOrderDetailsData = {}): CancelablePromise<GetOrderDetailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/order/history',
            query: {
                order_id: data.orderId,
                tag: data.tag
            },
            errors: {
                400: "UDAPI1010 - Order id accepts only alphanumeric characters and '-'<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Cancel order
     * Cancel order API can be used for two purposes:
     * Cancelling an open order which could be an AMO or a normal order
     * It is also used to EXIT a CO or OCO(bracket order)
     * @param data The data for the request.
     * @param data.orderId The order ID for which the order must be cancelled
     * @returns CancelOrderResponse Successful
     * @throws ApiError
     */
    public static cancelOrder(data: CancelOrderData2): CancelablePromise<CancelOrderResponse2> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/v2/order/cancel',
            query: {
                order_id: data.orderId
            },
            errors: {
                400: "UDAPI1010 - Order id accepts only alphanumeric characters and '-'.<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Get token API
     * This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
     * @param data The data for the request.
     * @param data.formData
     * @returns TokenResponse Successful
     * @throws ApiError
     */
    public static token(data: TokenData = {}): CancelablePromise<TokenResponse2> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/login/authorization/token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                400: 'UDAPI1017 - API Key is required <br/>UDAPI1018 - Redirect URI is required <br/>UDAPI1022 - Code is required <br/>UDAPI1023 - Grant type is required <br/>UDAPI1024 - App Secret is required <br/>',
                401: '',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Authorize API
     * This provides details on the login endpoint.
     * @param data The data for the request.
     * @param data.clientId
     * @param data.redirectUri
     * @param data.state
     * @param data.scope
     * @throws ApiError
     */
    public static authorize(data: AuthorizeData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/login/authorization/dialog',
            query: {
                client_id: data.clientId,
                redirect_uri: data.redirectUri,
                state: data.state,
                scope: data.scope
            },
            errors: {
                302: 'Successful Operation',
                400: 'UDAPI1018 - Redirect URI is required',
                401: '',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Auto Login
     * This API provides the functionality to obtain auth token from authorization_code exchange
     * @param data The data for the request.
     * @param data.appName
     * @param data.token
     * @throws ApiError
     */
    public static autoLogin(data: AutoLoginData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/auth/auto-login',
            query: {
                app_name: data.appName,
                token: data.token
            },
            errors: {
                302: 'Found',
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Logout
     * Logout
     * @returns LogoutResponse Successful
     * @throws ApiError
     */
    public static logout(): CancelablePromise<LogoutResponse2> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/v2/logout',
            errors: {
                400: 'Bad Request',
                401: 'Authorization Failure',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class UserService {
    /**
     * Get profile
     * This API allows to fetch the complete information of the user who is logged in including the products, order types and exchanges enabled for the user
     * @returns GetProfileResponse Successful
     * @throws ApiError
     */
    public static getProfile(): CancelablePromise<GetProfileResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/user/profile',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get User Fund And Margin
     * Shows the balance of the user in equity and commodity market.
     * @param data The data for the request.
     * @param data.segment
     * @returns GetUserFundMarginResponse Successful
     * @throws ApiError
     */
    public static getUserFundMargin(data: GetUserFundMarginData = {}): CancelablePromise<GetUserFundMarginResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/user/get-funds-and-margin',
            query: {
                segment: data.segment
            },
            errors: {
                400: 'UDAPI1019 - segment is invalid',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class TradeProfitAndLossService {
    /**
     * Get profit and loss meta data on trades
     * This API gives the data of the realised Profit and Loss report requested by a user
     * @param data The data for the request.
     * @param data.segment Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
     * @param data.financialYear Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
     * @param data.fromDate Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @param data.toDate Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @returns GetTradeWiseProfitAndLossMetaDataResponse Successful
     * @throws ApiError
     */
    public static getTradeWiseProfitAndLossMetaData(data: GetTradeWiseProfitAndLossMetaDataData): CancelablePromise<GetTradeWiseProfitAndLossMetaDataResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/trade/profit-loss/metadata',
            query: {
                from_date: data.fromDate,
                to_date: data.toDate,
                segment: data.segment,
                financial_year: data.financialYear
            },
            errors: {
                400: "UDAPI1070 - The financial_year is required<br>UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1073 - Financial year should have max length of 4<br>UDAPI1068 - The start_date is required<br>UDAPI1069 - The end_date is required",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Trade-wise Profit and Loss Report Data
     * This API gives the data of the realised Profit and Loss report requested by a user
     * @param data The data for the request.
     * @param data.segment Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
     * @param data.financialYear Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
     * @param data.pageNumber Page Number, the pages are starting from 1
     * @param data.pageSize Page size for pagination. The maximum page size value is obtained from P and L report metadata API.
     * @param data.fromDate Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @param data.toDate Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @returns GetTradeWiseProfitAndLossDataResponse Successful
     * @throws ApiError
     */
    public static getTradeWiseProfitAndLossData(data: GetTradeWiseProfitAndLossDataData): CancelablePromise<GetTradeWiseProfitAndLossDataResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/trade/profit-loss/data',
            query: {
                from_date: data.fromDate,
                to_date: data.toDate,
                segment: data.segment,
                financial_year: data.financialYear,
                page_number: data.pageNumber,
                page_size: data.pageSize
            },
            errors: {
                400: "UDAPI1070 - The financial_year is required<br>UDAPI1071 - The page_number is required<br>UDAPI1072 - The page_size is required<br>UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1073 - Financial year should have max length of 4",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get profit and loss on trades
     * This API gives the charges incurred by users for their trades
     * @param data The data for the request.
     * @param data.segment Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
     * @param data.financialYear Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
     * @param data.fromDate Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @param data.toDate Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
     * @returns GetProfitAndLossChargesResponse Successful
     * @throws ApiError
     */
    public static getProfitAndLossCharges(data: GetProfitAndLossChargesData): CancelablePromise<GetProfitAndLossChargesResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/trade/profit-loss/charges',
            query: {
                from_date: data.fromDate,
                to_date: data.toDate,
                segment: data.segment,
                financial_year: data.financialYear
            },
            errors: {
                400: "UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1068 - The start_date is required<br>UDAPI1069 - The end_date is required",
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class OptionsService {
    /**
     * Get option contracts
     * This API provides the functionality to retrieve the option contracts
     * @param data The data for the request.
     * @param data.instrumentKey Instrument key for an underlying symbol
     * @param data.expiryDate Expiry date in format: YYYY-mm-dd
     * @returns GetOptionContractResponse Successful
     * @throws ApiError
     */
    public static getOptionContracts(data: GetOptionContractsData): CancelablePromise<GetOptionContractsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/option/contract',
            query: {
                instrument_key: data.instrumentKey,
                expiry_date: data.expiryDate
            },
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get option chain
     * This API provides the functionality to retrieve the option chain
     * @param data The data for the request.
     * @param data.instrumentKey Instrument key for an underlying symbol
     * @param data.expiryDate Expiry date in format: YYYY-mm-dd
     * @returns GetOptionChainResponse Successful
     * @throws ApiError
     */
    public static getPutCallOptionChain(data: GetPutCallOptionChainData): CancelablePromise<GetPutCallOptionChainResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/option/chain',
            query: {
                instrument_key: data.instrumentKey,
                expiry_date: data.expiryDate
            },
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class MarketHolidaysAndTimingsService {
    /**
     * Get Exchange Timings on particular date
     * This API provides the functionality to retrieve the exchange timings on particular date
     * @param data The data for the request.
     * @param data.date
     * @returns GetExchangeTimingResponse Successful
     * @throws ApiError
     */
    public static getExchangeTimings(data: GetExchangeTimingsData): CancelablePromise<GetExchangeTimingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market/timings/{date}',
            path: {
                date: data.date
            },
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Market status for particular exchange
     * This API provides the functionality to retrieve the market status for particular exchange
     * @param data The data for the request.
     * @param data.exchange
     * @returns GetMarketStatusResponse Successful
     * @throws ApiError
     */
    public static getMarketStatus(data: GetMarketStatusData): CancelablePromise<GetMarketStatusResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market/status/{exchange}',
            path: {
                exchange: data.exchange
            },
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Holiday list of current year
     * This API provides the functionality to retrieve the holiday list of current year
     * @returns GetHolidayResponse Successful
     * @throws ApiError
     */
    public static getHolidays(): CancelablePromise<GetHolidaysResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market/holidays',
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Get Holiday on particular date
     * This API provides the functionality to retrieve the holiday on particular date
     * @param data The data for the request.
     * @param data.date
     * @returns GetHolidayResponse Successful
     * @throws ApiError
     */
    public static getHoliday(data: GetHolidayData): CancelablePromise<GetHolidayResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market/holidays/{date}',
            path: {
                date: data.date
            },
            errors: {
                400: '',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class MarketQuoteService {
    /**
     * Market quotes and instruments - Full market quotes
     * This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
     * @param data The data for the request.
     * @param data.symbol Comma separated list of symbols
     * @param data.instrumentKey Comma separated list of instrument keys
     * @returns GetFullMarketQuoteResponse Successful
     * @throws ApiError
     */
    public static getFullMarketQuote(data: GetFullMarketQuoteData = {}): CancelablePromise<GetFullMarketQuoteResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market-quote/quotes',
            query: {
                symbol: data.symbol,
                instrument_key: data.instrumentKey
            },
            errors: {
                400: 'UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Market quotes and instruments - OHLC quotes
     * This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
     * @param data The data for the request.
     * @param data.interval Interval to get ohlc data
     * @param data.symbol Comma separated list of symbols
     * @param data.instrumentKey Comma separated list of instrument keys
     * @returns GetMarketQuoteOHLCResponse Successful
     * @throws ApiError
     */
    public static getMarketQuoteOhlc(data: GetMarketQuoteOhlcData): CancelablePromise<GetMarketQuoteOhlcResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market-quote/ohlc',
            query: {
                symbol: data.symbol,
                instrument_key: data.instrumentKey,
                interval: data.interval
            },
            errors: {
                400: 'UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI1027 - interval is required<br>UDAPI1028 - Invalid interval<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Market quotes and instruments - LTP quotes.
     * This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
     * @param data The data for the request.
     * @param data.symbol Comma separated list of symbols
     * @param data.instrumentKey Comma separated list of instrument keys
     * @returns GetMarketQuoteLastTradedPriceResponse Successful
     * @throws ApiError
     */
    public static ltp(data: LtpData = {}): CancelablePromise<LtpResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/market-quote/ltp',
            query: {
                symbol: data.symbol,
                instrument_key: data.instrumentKey
            },
            errors: {
                400: 'UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class HistoryService {
    /**
     * Historical candle data
     * Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations.
     * 1minute: last 1 month candles till endDate
     * 30minute: last 1 year candles till endDate
     * day: last 1 year candles till endDate
     * week: last 10 year candles till endDate
     * month: last 10 year candles till endDate
     * @param data The data for the request.
     * @param data.instrumentKey
     * @param data.interval
     * @param data.toDate
     * @returns GetHistoricalCandleResponse Successful
     * @throws ApiError
     */
    public static getHistoricalCandleData(data: GetHistoricalCandleDataData): CancelablePromise<GetHistoricalCandleDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}',
            path: {
                instrumentKey: data.instrumentKey,
                interval: data.interval,
                to_date: data.toDate
            },
            errors: {
                400: 'UDAPI1015 - to_date must be greater than or equal to from_date and Date should be in valid format: yyyy-mm-dd<br>UDAPI1020 - Interval accepts one of (1minute,30minute,day,week,month)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI1022 - to_date is required<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Historical candle data
     * Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations.
     * 1minute: last 1 month candles till endDate
     * 30minute: last 1 year candles till endDate
     * day: last 1 year candles till endDate
     * week: last 10 year candles till endDate
     * month: last 10 year candles till endDate
     * @param data The data for the request.
     * @param data.instrumentKey
     * @param data.interval
     * @param data.toDate
     * @param data.fromDate
     * @returns GetHistoricalCandleResponse Successful
     * @throws ApiError
     */
    public static getHistoricalCandleData1(data: GetHistoricalCandleData1Data): CancelablePromise<GetHistoricalCandleData1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}/{from_date}',
            path: {
                instrumentKey: data.instrumentKey,
                interval: data.interval,
                to_date: data.toDate,
                from_date: data.fromDate
            },
            errors: {
                400: 'UDAPI1015 - to_date must be greater than or equal to from_date and Date should be in valid format: yyyy-mm-dd<br>UDAPI1020 - Interval accepts one of (1minute,30minute,day,week,month)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI1022 - to_date is required<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Intra day candle data
     * Get OHLC values for all instruments for the present trading day
     * @param data The data for the request.
     * @param data.instrumentKey
     * @param data.interval
     * @returns GetIntraDayCandleResponse Successful
     * @throws ApiError
     */
    public static getIntraDayCandleData(data: GetIntraDayCandleDataData): CancelablePromise<GetIntraDayCandleDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/historical-candle/intraday/{instrumentKey}/{interval}',
            path: {
                instrumentKey: data.instrumentKey,
                interval: data.interval
            },
            errors: {
                400: 'UDAPI1076 - Interval accepts one of (1minute,30minute)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI100011 - Invalid Instrument key',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class WebsocketService {
    /**
     * Portfolio Stream Feed
     * This API redirects the client to the respective socket endpoint to receive Portfolio updates.
     * @param data The data for the request.
     * @param data.updateTypes Identifiers separated by commas denote the types of updates to receive.
     * @throws ApiError
     */
    public static getPortfolioStreamFeed(data: GetPortfolioStreamFeedData = {}): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/feed/portfolio-stream-feed',
            query: {
                update_types: data.updateTypes
            },
            errors: {
                302: 'Location for authorized access of portfolio stream feed',
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Portfolio Stream Feed Authorize
     *  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
     * @param data The data for the request.
     * @param data.updateTypes Identifiers separated by commas denote the types of updates to receive.
     * @returns WebsocketAuthRedirectResponse Successful
     * @throws ApiError
     */
    public static getPortfolioStreamFeedAuthorize(data: GetPortfolioStreamFeedAuthorizeData = {}): CancelablePromise<GetPortfolioStreamFeedAuthorizeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/feed/portfolio-stream-feed/authorize',
            query: {
                update_types: data.updateTypes
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Market Data Feed
     *  This API redirects the client to the respective socket endpoint to receive Market updates.
     * @throws ApiError
     */
    public static getMarketDataFeed(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/feed/market-data-feed',
            errors: {
                302: 'Location for authorized access of market data feed',
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Market Data Feed Authorize
     * This API provides the functionality to retrieve the socket endpoint URI for Market updates.
     * @returns WebsocketAuthRedirectResponse Successful
     * @throws ApiError
     */
    public static getMarketDataFeedAuthorize(): CancelablePromise<GetMarketDataFeedAuthorizeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/feed/market-data-feed/authorize',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class PostTradeService {
    /**
     * @param data The data for the request.
     * @param data.startDate Date from which trade history needs to be fetched. Date in YYYY-mm-dd format
     * @param data.endDate Date till which history needs needs to be fetched. Date in YYYY-mm-dd format
     * @param data.pageNumber Page number for which you want to fetch trade history
     * @param data.pageSize How many records you want for a page
     * @param data.segment Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives MF - Mutual Funds
     * @returns TradeHistoryResponse OK
     * @throws ApiError
     */
    public static getTradeHistory1(data: GetTradeHistory1Data): CancelablePromise<GetTradeHistory1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/charges/historical-trades',
            query: {
                segment: data.segment,
                start_date: data.startDate,
                end_date: data.endDate,
                page_number: data.pageNumber,
                page_size: data.pageSize
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ChargeService {
    /**
     * Brokerage details
     * Compute Brokerage Charges
     * @param data The data for the request.
     * @param data.instrumentToken Key of the instrument
     * @param data.quantity Quantity with which the order is to be placed
     * @param data.product Product with which the order is to be placed
     * @param data.transactionType Indicates whether its a BUY or SELL order
     * @param data.price Price with which the order is to be placed
     * @returns GetBrokerageResponse Successful
     * @throws ApiError
     */
    public static getBrokerage(data: GetBrokerageData): CancelablePromise<GetBrokerageResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/charges/brokerage',
            query: {
                instrument_token: data.instrumentToken,
                quantity: data.quantity,
                product: data.product,
                transaction_type: data.transactionType,
                price: data.price
            },
            errors: {
                400: 'UDAPI1060 - The quantity is required<br>UDAPI1061 - The price is required<br>UDAPI1062 - The transaction_type is required<br> UDAPI1063 - The product is required<br> UDAPI1064 - The quantity cannot be zero<br>UDAPI1065 - The price cannot be zero<br>UDAPI1059 - The instrument_token is of invalid format',
                401: 'Unauthorized',
                405: 'Method Not Allowed',
                423: 'Locked',
                429: 'Too Many Requests',
                500: 'Internal Server Error'
            }
        });
    }
    
}