// This file is auto-generated by @hey-api/openapi-ts

export const $ApiGatewayErrorResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    errors: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Problem',
      },
    },
  },
} as const;

export const $Problem = {
  type: 'object',
  properties: {
    errorCode: {
      type: 'string',
      description: 'Unique code for the error state',
      deprecated: true,
    },
    message: {
      type: 'string',
      description: 'Verbose message for the error state',
    },
    propertyPath: {
      type: 'string',
      description: 'Path to property failing validation',
      deprecated: true,
    },
    invalidValue: {
      type: 'object',
      description: 'Invalid value for the property failing validation',
      deprecated: true,
    },
    error_code: {
      type: 'string',
    },
    property_path: {
      type: 'string',
    },
    invalid_value: {
      type: 'object',
    },
  },
} as const;

export const $ConvertPositionRequest = {
  required: ['instrument_token', 'new_product', 'old_product', 'quantity', 'transaction_type'],
  type: 'object',
  properties: {
    instrument_token: {
      type: 'string',
      description: 'Key of the instrument',
      example: '151064324',
    },
    new_product: {
      type: 'string',
      description: 'Indicates the new product to use for the convert positions',
      example: 'D',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    old_product: {
      type: 'string',
      description: 'Indicates the old product to use for the convert positions',
      example: 'I',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    transaction_type: {
      type: 'string',
      description: 'Indicates whether its a buy(b) or sell(s) order',
      example: 'BUY',
      enum: ['BUY', 'SELL'],
    },
    quantity: {
      type: 'integer',
      description: 'Quantity with which the position to convert',
      format: 'int32',
      example: 1,
    },
  },
} as const;

export const $ConvertPositionData = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      description: 'Status message for convert position request',
      readOnly: true,
      example: 'complete',
    },
  },
  description: 'Response data for convert position request',
} as const;

export const $ConvertPositionResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/ConvertPositionData',
    },
  },
} as const;

export const $ModifyOrderRequest = {
  required: ['order_id', 'order_type', 'price', 'trigger_price', 'validity'],
  type: 'object',
  properties: {
    quantity: {
      type: 'integer',
      description: 'Quantity with which the order was placed',
      format: 'int32',
      example: 1,
    },
    validity: {
      type: 'string',
      description: 'Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)',
      example: 'DAY',
      enum: ['DAY', 'IOC'],
    },
    price: {
      type: 'number',
      description: 'Price at which the order was placed',
      format: 'float',
      example: 120.01,
    },
    order_id: {
      type: 'string',
      description: 'The order ID for which the order must be modified',
      example: '1644490272000',
    },
    order_type: {
      type: 'string',
      description: `Type of order. It can be one of the following
MARKET refers to market order
LIMILT refers to Limit Order
SL refers to Stop Loss Limit
SL-M refers to Stop Loss Market`,
      example: 'MARKET',
      enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
    },
    disclosed_quantity: {
      type: 'integer',
      description: 'The quantity that should be disclosed in the market depth',
      format: 'int32',
      example: 0,
    },
    trigger_price: {
      type: 'number',
      description: 'If the order is a stop loss order then the trigger price to be set is mentioned here',
      format: 'float',
      example: 0,
    },
  },
} as const;

export const $ModifyOrderData = {
  type: 'object',
  properties: {
    order_id: {
      type: 'string',
      description: 'Order ID',
      readOnly: true,
      example: '1644490272000',
    },
  },
  description: 'Response data for modify order request',
} as const;

export const $ModifyOrderResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/ModifyOrderData',
    },
  },
} as const;

export const $PlaceOrderRequest = {
  required: [
    'disclosed_quantity',
    'instrument_token',
    'is_amo',
    'order_type',
    'price',
    'product',
    'quantity',
    'transaction_type',
    'trigger_price',
    'validity',
  ],
  type: 'object',
  properties: {
    quantity: {
      type: 'integer',
      description: 'Quantity with which the order is to be placed',
      format: 'int32',
      example: 1,
    },
    product: {
      type: 'string',
      description: 'Signifies if the order was either Intraday, Delivery, CO or OCO',
      example: 'D',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    validity: {
      type: 'string',
      description: 'It can be one of the following - DAY(default), IOC',
      example: 'DAY',
      enum: ['DAY', 'IOC'],
    },
    price: {
      type: 'number',
      description: 'Price at which the order will be placed',
      format: 'float',
      example: 0,
    },
    tag: {
      type: 'string',
      description: 'Tag for a particular order',
    },
    instrument_token: {
      type: 'string',
      description: 'Key of the instrument',
      example: 'NSE_EQ|INE848E01016',
    },
    order_type: {
      type: 'string',
      description: `Type of order. It can be one of the following
MARKET refers to market order
LIMIT refers to Limit Order
SL refers to Stop Loss Limit
SL-M refers to Stop Loss Market`,
      example: 'MARKET',
      enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
    },
    transaction_type: {
      type: 'string',
      description: 'Indicates whether its a buy or sell order',
      example: 'BUY',
      enum: ['BUY', 'SELL'],
    },
    disclosed_quantity: {
      type: 'integer',
      description: 'The quantity that should be disclosed in the market depth',
      format: 'int32',
      example: 0,
    },
    trigger_price: {
      type: 'number',
      description: 'If the order is a stop loss order then the trigger price to be set is mentioned here',
      format: 'float',
      example: 0,
    },
    is_amo: {
      type: 'boolean',
      description: 'Signifies if the order is an After Market Order',
      example: false,
    },
  },
} as const;

export const $PlaceOrderData = {
  type: 'object',
  properties: {
    order_id: {
      type: 'string',
      description: 'An order ID for the order request placed',
      readOnly: true,
      example: '1644490272000',
    },
  },
  description: 'Response data for place order request',
} as const;

export const $PlaceOrderResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/PlaceOrderData',
    },
  },
} as const;

export const $TokenRequest = {
  required: ['client_id', 'client_secret', 'code', 'grant_type', 'redirect_uri'],
  type: 'object',
  properties: {
    code: {
      type: 'string',
    },
    client_id: {
      type: 'string',
      description: 'OAuth API key that is a public identifier for app',
    },
    client_secret: {
      type: 'string',
      description: 'OAuth client secret that is a private secret known only to app and authorization server',
    },
    redirect_uri: {
      type: 'string',
      description: 'Authorization server will redirect the user back to the application via redirect url',
    },
    grant_type: {
      type: 'string',
      description: 'Type of grant used to get an access token',
    },
  },
} as const;

export const $TokenResponse = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: 'E-mail address of the user',
      readOnly: true,
      example: 'client@email.com',
    },
    exchanges: {
      type: 'array',
      description: 'Lists the exchanges to which the user has access',
      readOnly: true,
      example: 'NSE',
      items: {
        type: 'string',
        description: 'Lists the exchanges to which the user has access',
        readOnly: true,
        example: 'NSE',
        enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
      },
    },
    products: {
      type: 'array',
      description: 'Lists the products types to which the user has access',
      readOnly: true,
      example: 'D',
      items: {
        type: 'string',
        description: 'Lists the products types to which the user has access',
        readOnly: true,
        example: 'D',
        enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
      },
    },
    broker: {
      type: 'string',
      description: 'The broker ID',
      readOnly: true,
      example: 'UPSTOX',
    },
    user_id: {
      type: 'string',
      description: 'Uniquely identifies the user',
      readOnly: true,
      example: '202251',
    },
    user_name: {
      type: 'string',
      description: 'Name of the user',
      readOnly: true,
      example: 'client',
    },
    order_types: {
      type: 'array',
      description: 'Order types enabled for the user',
      readOnly: true,
      example: 'LIMIT',
      items: {
        type: 'string',
        description: 'Order types enabled for the user',
        readOnly: true,
        example: 'LIMIT',
        enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
      },
    },
    user_type: {
      type: 'string',
      description: `	
Identifies the user's registered role at the broker. This will be individual for all retail users`,
      readOnly: true,
      example: 'individual',
    },
    poa: {
      type: 'boolean',
      description: `	
To depict if the user has given power of attorney for transactions`,
      readOnly: true,
      example: true,
    },
    is_active: {
      type: 'boolean',
      description: `	
Whether the status of account is active or not`,
      readOnly: true,
      example: true,
    },
    access_token: {
      type: 'string',
      description: 'The authentication token that is to used with every subsequent API requests',
      readOnly: true,
    },
    extended_token: {
      type: 'string',
      description:
        'An extended authentication token with a prolonged validity period, intended for specific API requests. Ensure you use this token only with the designated set of APIs.',
      readOnly: true,
    },
  },
} as const;

export const $GetProfileResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/ProfileData',
    },
  },
} as const;

export const $ProfileData = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: 'E-mail address of the user',
      readOnly: true,
      example: 'client@email.com',
    },
    exchanges: {
      type: 'array',
      description: 'Lists the exchanges to which the user has access',
      readOnly: true,
      example: 'NSE',
      items: {
        type: 'string',
        description: 'Lists the exchanges to which the user has access',
        readOnly: true,
        example: 'NSE',
        enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
      },
    },
    products: {
      type: 'array',
      description: 'Lists the products types to which the user has access',
      readOnly: true,
      example: 'D',
      items: {
        type: 'string',
        description: 'Lists the products types to which the user has access',
        readOnly: true,
        example: 'D',
        enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
      },
    },
    broker: {
      type: 'string',
      description: 'The broker ID',
      readOnly: true,
      example: 'UPSTOX',
    },
    user_id: {
      type: 'string',
      description: 'Uniquely identifies the user',
      readOnly: true,
      example: '202251',
    },
    user_name: {
      type: 'string',
      description: 'Name of the user',
      readOnly: true,
      example: 'client',
    },
    order_types: {
      type: 'array',
      description: 'Order types enabled for the user',
      readOnly: true,
      example: 'LIMIT',
      items: {
        type: 'string',
        description: 'Order types enabled for the user',
        readOnly: true,
        example: 'LIMIT',
        enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
      },
    },
    user_type: {
      type: 'string',
      description: `	
Identifies the user's registered role at the broker. This will be individual for all retail users`,
      readOnly: true,
      example: 'individual',
    },
    poa: {
      type: 'boolean',
      description: `	
To depict if the user has given power of attorney for transactions`,
      readOnly: true,
      example: true,
    },
    is_active: {
      type: 'boolean',
      description: `	
Whether the status of account is active or not`,
      readOnly: true,
      example: true,
    },
  },
  description: 'Response data for user profile',
} as const;

export const $GetUserFundMarginResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/UserFundMarginData',
      },
      description: 'Response data for Balance',
    },
  },
} as const;

export const $UserFundMarginData = {
  type: 'object',
  properties: {
    used_margin: {
      type: 'number',
      description: `Positive values denote the amount blocked into an Open order or position. 
Negative value denotes the amount being released.`,
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    payin_amount: {
      type: 'number',
      description: 'Instant payin will reflect here',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    span_margin: {
      type: 'number',
      description: 'Amount blocked on futures and options towards SPAN',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    adhoc_margin: {
      type: 'number',
      description: 'Payin amount credited through a manual process',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    notional_cash: {
      type: 'number',
      description: 'The amount maintained for withdrawal',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    available_margin: {
      type: 'number',
      description: 'Total margin available for trading',
      format: 'float',
      readOnly: true,
      example: 200,
    },
    exposure_margin: {
      type: 'number',
      description: 'Amount blocked on futures and options towards Exposure',
      format: 'float',
      readOnly: true,
      example: 0,
    },
  },
  description: 'Response data for Balance',
} as const;

export const $GetTradeWiseProfitAndLossMetaDataResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/TradeWiseMetaData',
    },
  },
} as const;

export const $TradeWiseMetaData = {
  type: 'object',
  properties: {
    trades_count: {
      type: 'integer',
      description: 'Total count of trades in the trade wise P and L report',
      format: 'int32',
      readOnly: true,
      example: 10,
    },
    page_size_limit: {
      type: 'integer',
      description: 'Maximum number of trades in a page of the trade wise P and L report API',
      format: 'int32',
      readOnly: true,
      example: 5000,
    },
  },
  description: 'Response data for brokerage',
} as const;

export const $GetTradeWiseProfitAndLossDataResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for trade wise data details',
      items: {
        $ref: '#/components/schemas/TradeWiseProfitAndLossData',
      },
    },
    metadata: {
      $ref: '#/components/schemas/ProfitAndLossMetaDataWrapper',
    },
  },
} as const;

export const $ProfitAndLossMetaData = {
  type: 'object',
  properties: {
    page_number: {
      type: 'integer',
      description: 'pageNumber for pagination',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    page_size: {
      type: 'integer',
      description: 'Page size',
      format: 'int32',
      readOnly: true,
      example: 2,
    },
  },
  description: 'Meta data for trade wise data details',
} as const;

export const $ProfitAndLossMetaDataWrapper = {
  type: 'object',
  properties: {
    page: {
      $ref: '#/components/schemas/ProfitAndLossMetaData',
    },
  },
} as const;

export const $TradeWiseProfitAndLossData = {
  type: 'object',
  properties: {
    quantity: {
      type: 'number',
      description: 'The quantity of stock traded',
      format: 'float',
      readOnly: true,
      example: 100,
    },
    isin: {
      type: 'string',
      description: 'ISIN of the stock',
      readOnly: true,
      example: 'INE256A01028',
    },
    scrip_name: {
      type: 'string',
      description: 'Name of the scrip traded',
      readOnly: true,
      example: 'ZEE ENTER',
    },
    trade_type: {
      type: 'string',
      description: `FUT - Futures

OPT - Options

EQ - Equity`,
      readOnly: true,
      example: 'EQ',
    },
    buy_date: {
      type: 'string',
      description: 'The date on which the stock was bought',
      readOnly: true,
      example: '14-09-2021',
    },
    buy_average: {
      type: 'number',
      description: 'The average rate at which each quantity of the stock was bought',
      format: 'float',
      readOnly: true,
      example: 12345.67,
    },
    sell_date: {
      type: 'string',
      description: 'The date on which the stock was sold',
      readOnly: true,
      example: '14-09-2021',
    },
    sell_average: {
      type: 'number',
      description: 'The average rate at which each quantity of the stock was sold',
      format: 'float',
      readOnly: true,
      example: 12345.67,
    },
    buy_amount: {
      type: 'number',
      description: 'Total buy amount',
      format: 'float',
      readOnly: true,
      example: 12345.67,
    },
    sell_amount: {
      type: 'number',
      description: 'Total sell amount',
      format: 'float',
      readOnly: true,
      example: 12345.67,
    },
  },
  description: 'Response data for trade wise data details',
} as const;

export const $GetProfitAndLossChargesResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/ProfitAndLossChargesWrapperData',
    },
  },
} as const;

export const $ProfitAndLossChargesData = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
      description: ' Total charges for the user',
      format: 'float',
      readOnly: true,
      example: 123.1,
    },
    brokerage: {
      type: 'number',
      description: 'Brokerage charges for the order',
      format: 'float',
      readOnly: true,
      example: 432.1,
    },
    taxes: {
      $ref: '#/components/schemas/ProfitAndLossChargesTaxes',
    },
    charges: {
      $ref: '#/components/schemas/ProfitAndLossOtherChargesTaxes',
    },
  },
  description: 'Response data for charges details',
} as const;

export const $ProfitAndLossChargesTaxes = {
  type: 'object',
  properties: {
    gst: {
      type: 'number',
      description: 'GST charges',
      format: 'float',
    },
    stt: {
      type: 'number',
      description: 'STT charges',
      format: 'float',
    },
    stamp_duty: {
      type: 'number',
      description: 'Stamp duty charges',
      format: 'float',
    },
  },
  description: 'Taxes levied on order',
  readOnly: true,
} as const;

export const $ProfitAndLossChargesWrapperData = {
  type: 'object',
  properties: {
    charges_breakdown: {
      $ref: '#/components/schemas/ProfitAndLossChargesData',
    },
  },
  description: 'Response data for brokerage',
} as const;

export const $ProfitAndLossOtherChargesTaxes = {
  type: 'object',
  properties: {
    transaction: {
      type: 'number',
      description: 'transaction charges',
      format: 'float',
    },
    clearing: {
      type: 'number',
      description: 'clearing charges',
      format: 'float',
    },
    ipft: {
      type: 'number',
      description: 'IPF charges',
      format: 'float',
    },
    others: {
      type: 'number',
      description: 'others charges',
      format: 'float',
    },
    sebi_turnover: {
      type: 'number',
      description: 'SEBI turnover',
      format: 'float',
    },
    demat_transaction: {
      type: 'number',
      description: 'demat transaction charges',
      format: 'float',
    },
  },
  description: 'Other charges levied',
  readOnly: true,
} as const;

export const $GetPositionResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for position details',
      items: {
        $ref: '#/components/schemas/PositionData',
      },
    },
  },
} as const;

export const $PositionData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
      description: 'Exchange to which the order is associated',
      readOnly: true,
      example: 'NSE',
      enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
    },
    multiplier: {
      type: 'number',
      description: 'The quantity/lot size multiplier used for calculating P&Ls',
      format: 'float',
      readOnly: true,
      example: 1,
    },
    value: {
      type: 'number',
      description: 'Net value of the position',
      format: 'float',
      readOnly: true,
      example: 120,
    },
    pnl: {
      type: 'number',
      description: 'Profit and loss - net returns on the position',
      format: 'float',
      readOnly: true,
      example: 121.01,
    },
    product: {
      type: 'string',
      description: 'Shows if the order was either Intraday, Delivery, CO or OCO',
      readOnly: true,
      example: 'D',
    },
    instrument_token: {
      type: 'string',
      description: 'Key issued by Upstox for the instrument',
      readOnly: true,
      example: '151064324',
    },
    average_price: {
      type: 'number',
      description: 'Average price at which the net position quantity was acquired',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    buy_value: {
      type: 'number',
      description: 'Net value of the bought quantities',
      format: 'float',
      readOnly: true,
      example: 120,
    },
    overnight_quantity: {
      type: 'integer',
      description: 'Quantity held previously and carried forward over night',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    day_buy_value: {
      type: 'number',
      description: 'Amount at which the quantity is bought during the day',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    day_buy_price: {
      type: 'number',
      description: 'Average price at which the day qty was bought. Default is empty string',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    overnight_buy_amount: {
      type: 'number',
      description: 'Amount at which the quantity was bought in the previous session',
      format: 'float',
      readOnly: true,
      example: 12,
    },
    overnight_buy_quantity: {
      type: 'integer',
      description: 'Quantity bought in the previous session',
      format: 'int32',
      readOnly: true,
      example: 12,
    },
    day_buy_quantity: {
      type: 'integer',
      description: 'Quantity bought during the day',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    day_sell_value: {
      type: 'number',
      description: 'Amount at which the quantity is sold during the day',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    day_sell_price: {
      type: 'number',
      description: 'Average price at which the day quantity was sold',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    overnight_sell_amount: {
      type: 'number',
      description: 'Amount at which the quantity was sold in the previous session',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    overnight_sell_quantity: {
      type: 'integer',
      description: 'Quantity sold short in the previous session',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    day_sell_quantity: {
      type: 'integer',
      description: 'Quantity sold during the day',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    quantity: {
      type: 'integer',
      description: 'Quantity left after nullifying Day and CF buy quantity towards Day and CF sell quantity',
      format: 'int32',
      readOnly: true,
      example: 2,
    },
    last_price: {
      type: 'number',
      description: 'Last traded market price of the instrument',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    unrealised: {
      type: 'number',
      description: 'Day PnL generated against open positions',
      format: 'float',
      readOnly: true,
      example: 121.01,
    },
    realised: {
      type: 'number',
      description: 'Day PnL generated against closed positions',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    sell_value: {
      type: 'number',
      description: 'Net value of the sold quantities',
      format: 'float',
      readOnly: true,
      example: 0,
    },
    tradingsymbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
      deprecated: true,
    },
    trading_symbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
    },
    close_price: {
      type: 'number',
      description: 'Closing price of the instrument from the last trading day',
      format: 'float',
      readOnly: true,
      example: 102,
    },
    buy_price: {
      type: 'number',
      description: 'Average price at which quantities were bought',
      format: 'float',
      readOnly: true,
      example: 102,
    },
    sell_price: {
      type: 'number',
      description: 'Average price at which quantities were sold',
      format: 'float',
      readOnly: true,
      example: 102,
    },
  },
  description: 'Response data for position details',
} as const;

export const $GetHoldingsResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for holdings',
      items: {
        $ref: '#/components/schemas/HoldingsData',
      },
    },
  },
} as const;

export const $HoldingsData = {
  type: 'object',
  properties: {
    isin: {
      type: 'string',
      description: 'The standard ISIN representing stocks listed on multiple exchanges',
      readOnly: true,
      example: 'INE118H01025',
    },
    cnc_used_quantity: {
      type: 'integer',
      description: 'Quantity either blocked towards open or completed order',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    collateral_type: {
      type: 'string',
      description: 'Category of collateral assigned by RMS',
      readOnly: true,
      example: 'WC',
    },
    company_name: {
      type: 'string',
      description: 'Name of the company',
      readOnly: true,
      example: 'BSE LIM',
    },
    haircut: {
      type: 'number',
      description: 'This is the haircut percentage applied from RMS (applicable incase of collateral)',
      format: 'float',
      readOnly: true,
      example: 0.23,
    },
    product: {
      type: 'string',
      description: 'Shows if the order was either Intraday, Delivery, CO or OCO',
      readOnly: true,
      example: 'D',
    },
    quantity: {
      type: 'integer',
      description: 'The total holding qty',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    tradingsymbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'BSE',
      deprecated: true,
    },
    last_price: {
      type: 'number',
      description: 'The last traded price of the instrument',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    close_price: {
      type: 'number',
      description: 'Closing price of the instrument from the last trading day',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    pnl: {
      type: 'number',
      description: 'Profit and Loss',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    day_change: {
      type: 'number',
      description: "Day's change in absolute value for the stock",
      format: 'float',
      readOnly: true,
      example: 0,
    },
    day_change_percentage: {
      type: 'number',
      description: "Day's change in percentage for the stock",
      format: 'float',
      readOnly: true,
      example: 0,
    },
    instrument_token: {
      type: 'string',
      description: 'Key issued by Upstox for the instrument',
      readOnly: true,
      example: '151064324',
    },
    average_price: {
      type: 'number',
      description: 'Average price at which the net holding quantity was acquired',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    collateral_quantity: {
      type: 'integer',
      description: 'Quantity marked as collateral by RMS on users request',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    collateral_update_quantity: {
      type: 'integer',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    trading_symbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'BSE',
    },
    t1_quantity: {
      type: 'integer',
      description: 'Quantity on T+1 day after order execution',
      format: 'int32',
      readOnly: true,
      example: 0,
    },
    exchange: {
      type: 'string',
      description: 'Exchange of the trading symbol',
      readOnly: true,
      example: 'NSE',
      enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
    },
  },
  description: 'Response data for holdings',
} as const;

export const $GetTradeResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for trades',
      items: {
        $ref: '#/components/schemas/TradeData',
      },
    },
  },
} as const;

export const $TradeData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
      description: 'Exchange to which the order is associated',
      readOnly: true,
      example: 'NSE',
      enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
    },
    product: {
      type: 'string',
      description: 'Shows if the order was either Intraday, Delivery, CO or OCO',
      readOnly: true,
      example: 'D',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    tradingsymbol: {
      type: 'string',
      description: 'Shows the trading symbol which could be a combination of symbol name, instrument, expiry date etc',
      readOnly: true,
      example: 'GMRINFRA-EQ',
      deprecated: true,
    },
    trading_symbol: {
      type: 'string',
      description: 'Shows the trading symbol which could be a combination of symbol name, instrument, expiry date etc',
      readOnly: true,
      example: 'GMRINFRA-EQ',
    },
    instrument_token: {
      type: 'string',
      description: 'Identifier issued by Upstox used for subscribing to live market quotes',
      readOnly: true,
      example: '151064324',
    },
    order_type: {
      type: 'string',
      description: `Type of order. It can be one of the following
MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market`,
      readOnly: true,
      example: 'MARKET',
      enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
    },
    transaction_type: {
      type: 'string',
      description: 'Indicates whether the order was a buy or sell order',
      readOnly: true,
      example: 'BUY',
      enum: ['BUY', 'SELL'],
    },
    quantity: {
      type: 'integer',
      description: 'The total quantity traded from this particular order',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    exchange_order_id: {
      type: 'string',
      description: 'Unique order ID assigned by the exchange for the order placed',
      readOnly: true,
      example: '221013001021540',
    },
    order_id: {
      type: 'string',
      description: 'Unique order ID assigned internally for the order placed',
      readOnly: true,
      example: '221013001021539',
    },
    exchange_timestamp: {
      type: 'string',
      description: 'User readable time at when the trade occurred',
      readOnly: true,
      example: '03-Aug-2017 15:03:42',
    },
    average_price: {
      type: 'number',
      description: 'Price at which the traded quantity is traded',
      format: 'float',
      readOnly: true,
      example: 299.4,
    },
    trade_id: {
      type: 'string',
      description: 'Trade ID generated from exchange towards traded transaction',
      readOnly: true,
      example: '50091502',
    },
    order_ref_id: {
      type: 'string',
      description: 'The order reference ID for which the order must be modified',
      readOnly: true,
      example: 'udapi-aqwsed14356',
    },
    order_timestamp: {
      type: 'string',
      description: 'User readable timestamp at which the order was placed',
      readOnly: true,
      example: '23-Apr-2021 14:22:06',
    },
  },
  description: 'Response data for trades',
} as const;

export const $GetOrderBookResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for order Book',
      items: {
        $ref: '#/components/schemas/OrderBookData',
      },
    },
  },
} as const;

export const $OrderBookData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
      description: 'Exchange to which the order is associated',
      readOnly: true,
      example: 'NSE',
      enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
    },
    product: {
      type: 'string',
      description: 'Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther',
      readOnly: true,
      example: 'D',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    price: {
      type: 'number',
      description: 'Price at which the order was placed',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    quantity: {
      type: 'integer',
      description: 'Quantity with which the order was placed',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    status: {
      type: 'string',
      description: 'Indicates the current status of the order. Valid order status’ are outlined in the table below',
      readOnly: true,
      example: 'Complete',
    },
    guid: {
      type: 'string',
      readOnly: true,
    },
    tag: {
      type: 'string',
      description: 'Tag to uniquely identify an order',
      readOnly: true,
    },
    instrument_token: {
      type: 'string',
      description: 'Identifier issued by Upstox used for subscribing to live market quotes',
      readOnly: true,
      example: '151064324',
    },
    placed_by: {
      type: 'string',
      description: 'Uniquely identifies the user',
      readOnly: true,
      example: '200123',
    },
    tradingsymbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
      deprecated: true,
    },
    trading_symbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
    },
    order_type: {
      type: 'string',
      description: `Type of order. It can be one of the following
MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market`,
      readOnly: true,
      example: 'MARKET',
      enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
    },
    validity: {
      type: 'string',
      description: 'Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)',
      readOnly: true,
      example: 'DAY',
      enum: ['DAY', 'IOC', 'EOS'],
    },
    trigger_price: {
      type: 'number',
      description: 'If the order was a stop loss order then the trigger price set is mentioned here',
      format: 'float',
      readOnly: true,
      example: 120,
    },
    disclosed_quantity: {
      type: 'integer',
      description: 'The quantity that should be disclosed in the market depth',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    transaction_type: {
      type: 'string',
      description: 'Indicates whether the order was a buy or sell order',
      readOnly: true,
      example: 'BUY',
      enum: ['BUY', 'SELL'],
    },
    average_price: {
      type: 'number',
      description: 'Average price at which the qty got traded',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    filled_quantity: {
      type: 'integer',
      description: 'The total quantity traded from this particular order',
      format: 'int32',
      readOnly: true,
    },
    pending_quantity: {
      type: 'integer',
      description: 'Pending quantity to be filled',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    status_message: {
      type: 'string',
      description: 'Indicates the reason when any order is rejected, not modified or cancelled',
      readOnly: true,
    },
    status_message_raw: {
      type: 'string',
      description: "Description of the order's status as received from RMS",
      readOnly: true,
    },
    exchange_order_id: {
      type: 'string',
      description: 'Unique order ID assigned by the exchange for the order placed',
      readOnly: true,
      example: '221013001021540',
    },
    parent_order_id: {
      type: 'string',
      description:
        'In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here',
      readOnly: true,
      example: '221013001021541',
    },
    order_id: {
      type: 'string',
      description: 'Unique order ID assigned internally for the order placed',
      readOnly: true,
      example: '221013001021541',
    },
    variety: {
      type: 'string',
      description: 'Order complexity',
      readOnly: true,
      example: 'SIMPLE',
    },
    order_timestamp: {
      type: 'string',
      description: 'User readable timestamp at which the order was placed',
      readOnly: true,
      example: '23-Apr-2021 14:22:06',
    },
    exchange_timestamp: {
      type: 'string',
      description: 'User readable time at which the order was placed or updated',
      readOnly: true,
      example: '24-Apr-2021 14:22:06',
    },
    is_amo: {
      type: 'boolean',
      description: 'Signifies if the order is an After Market Order',
      readOnly: true,
      example: false,
    },
    order_request_id: {
      type: 'string',
      description: 'Apart from 1st order it shows the count of how many requests were sent',
      readOnly: true,
      example: '221013001021542',
    },
    order_ref_id: {
      type: 'string',
      description: 'The order reference ID for which the order must be modified',
      readOnly: true,
      example: 'udapi-12345abcd',
    },
  },
  description: 'Response data for order Book',
} as const;

export const $GetOrderResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for order details',
      items: {
        $ref: '#/components/schemas/OrderData',
      },
    },
  },
} as const;

export const $OrderData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
      description: 'Exchange to which the order is associated',
      readOnly: true,
      example: 'NSE',
      enum: ['NSE', 'NFO', 'CDS', 'BSE', 'BFO', 'BCD', 'MCX', 'NSCOM'],
    },
    price: {
      type: 'number',
      description: 'Price at which the order was placed',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    product: {
      type: 'string',
      description: 'Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther',
      readOnly: true,
      example: 'D',
      enum: ['I', 'D', 'CO', 'OCO', 'MTF'],
    },
    quantity: {
      type: 'integer',
      description: 'Quantity with which the order was placed',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    status: {
      type: 'string',
      description: 'Indicates the current status of the order. Valid order status’ are outlined in the table below',
      readOnly: true,
      example: 'complete',
    },
    tag: {
      type: 'string',
      description: 'Tag to uniquely identify an order',
      readOnly: true,
    },
    validity: {
      type: 'string',
      description: 'Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)',
      readOnly: true,
      example: 'DAY',
      enum: ['DAY', 'IOC', 'EOS'],
    },
    average_price: {
      type: 'number',
      description: 'Average price at which the qty got traded',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    disclosed_quantity: {
      type: 'integer',
      description: 'The quantity that should be disclosed in the market depth',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    exchange_order_id: {
      type: 'string',
      description: 'Unique order ID assigned by the exchange for the order placed',
      readOnly: true,
      example: '221013001021540',
    },
    exchange_timestamp: {
      type: 'string',
      description: 'User readable time at which the order was placed or updated',
      readOnly: true,
      example: '03-Aug-2017 15:03:42',
    },
    instrument_token: {
      type: 'string',
      description: 'Identifier issued by Upstox used for subscribing to live market quotes',
      readOnly: true,
      example: '151064324',
    },
    is_amo: {
      type: 'boolean',
      description: 'Signifies if the order is an After Market Order',
      readOnly: true,
      example: false,
    },
    status_message: {
      type: 'string',
      description: 'Indicates the reason when any order is rejected, not modified or cancelled',
      readOnly: true,
    },
    order_id: {
      type: 'string',
      description: 'Unique order ID assigned internally for the order placed',
      readOnly: true,
      example: '221013001021541',
    },
    order_request_id: {
      type: 'string',
      description: 'Apart from 1st order it shows the count of how many requests were sent',
      readOnly: true,
      example: '221013001021542',
    },
    order_type: {
      type: 'string',
      description: `Type of order. It can be one of the following
MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market`,
      readOnly: true,
      example: 'MARKET',
      enum: ['MARKET', 'LIMIT', 'SL', 'SL-M'],
    },
    parent_order_id: {
      type: 'string',
      description:
        'In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here',
      readOnly: true,
      example: '221013001021543',
    },
    tradingsymbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
      deprecated: true,
    },
    trading_symbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'GMR',
    },
    order_timestamp: {
      type: 'string',
      description: 'User readable timestamp at which the order was placed',
      readOnly: true,
      example: '23-Apr-2021 14:22:06',
    },
    filled_quantity: {
      type: 'integer',
      description: 'The total quantity traded from this particular order',
      format: 'int32',
      readOnly: true,
      example: 1,
    },
    transaction_type: {
      type: 'string',
      description: 'Indicates whether the order was a buy or sell order',
      readOnly: true,
      example: 'BUY',
      enum: ['BUY', 'SELL'],
    },
    trigger_price: {
      type: 'number',
      description: 'If the order was a stop loss order then the trigger price set is mentioned here',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    placed_by: {
      type: 'string',
      description: 'Uniquely identifies the user',
      readOnly: true,
      example: '200123',
    },
    variety: {
      type: 'string',
      description: 'Order complexity',
      readOnly: true,
      example: 'SIMPLE',
    },
  },
  description: 'Response data for order details',
} as const;

export const $GetOptionContractResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for option contracts',
      items: {
        $ref: '#/components/schemas/InstrumentData',
      },
    },
  },
} as const;

export const $InstrumentData = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    segment: {
      type: 'string',
    },
    exchange: {
      type: 'string',
    },
    isin: {
      type: 'string',
    },
    expiry: {
      type: 'string',
      format: 'date-time',
    },
    country: {
      type: 'string',
    },
    latency: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    currency: {
      type: 'string',
    },
    weekly: {
      type: 'boolean',
    },
    instrument_key: {
      type: 'string',
    },
    exchange_token: {
      type: 'string',
    },
    trading_symbol: {
      type: 'string',
    },
    short_name: {
      type: 'string',
    },
    tick_size: {
      type: 'number',
      format: 'double',
    },
    lot_size: {
      type: 'integer',
      format: 'int64',
    },
    instrument_type: {
      type: 'string',
    },
    freeze_quantity: {
      type: 'number',
      format: 'double',
    },
    underlying_key: {
      type: 'string',
    },
    underlying_type: {
      type: 'string',
    },
    underlying_symbol: {
      type: 'string',
    },
    last_trading_date: {
      type: 'string',
      format: 'date-time',
    },
    strike_price: {
      type: 'number',
      format: 'double',
    },
    price_quote_unit: {
      type: 'string',
    },
    qty_multiplier: {
      type: 'integer',
      format: 'int64',
    },
    minimum_lot: {
      type: 'integer',
      format: 'int64',
    },
    start_time: {
      type: 'string',
    },
    end_time: {
      type: 'string',
    },
    week_days: {
      type: 'string',
    },
    general_denominator: {
      type: 'number',
      format: 'double',
    },
    general_numerator: {
      type: 'number',
      format: 'double',
    },
    price_numerator: {
      type: 'number',
      format: 'double',
    },
    price_denominator: {
      type: 'number',
      format: 'double',
    },
    mtf_enabled: {
      type: 'boolean',
    },
    mtf_bracket: {
      type: 'number',
      format: 'double',
    },
    security_type: {
      type: 'string',
    },
  },
  description: 'Response data for option contracts',
} as const;

export const $AnalyticsData = {
  type: 'object',
  properties: {
    vega: {
      type: 'number',
      format: 'double',
    },
    theta: {
      type: 'number',
      format: 'double',
    },
    gamma: {
      type: 'number',
      format: 'double',
    },
    delta: {
      type: 'number',
      format: 'double',
    },
    iv: {
      type: 'number',
      format: 'double',
    },
    pop: {
      type: 'number',
      format: 'double',
    },
  },
} as const;

export const $GetOptionChainResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for option chain data',
      items: {
        $ref: '#/components/schemas/OptionStrikeData',
      },
    },
  },
} as const;

export const $MarketData = {
  type: 'object',
  properties: {
    ltp: {
      type: 'number',
      format: 'double',
    },
    volume: {
      type: 'integer',
      format: 'int64',
    },
    oi: {
      type: 'number',
      format: 'double',
    },
    close_price: {
      type: 'number',
      format: 'double',
    },
    bid_price: {
      type: 'number',
      format: 'double',
    },
    bid_qty: {
      type: 'integer',
      format: 'int32',
    },
    ask_price: {
      type: 'number',
      format: 'double',
    },
    ask_qty: {
      type: 'integer',
      format: 'int32',
    },
    prev_oi: {
      type: 'number',
      format: 'double',
    },
  },
} as const;

export const $OptionStrikeData = {
  type: 'object',
  properties: {
    expiry: {
      type: 'string',
      format: 'date-time',
    },
    pcr: {
      type: 'number',
      format: 'double',
    },
    strike_price: {
      type: 'number',
      format: 'double',
    },
    underlying_key: {
      type: 'string',
    },
    underlying_spot_price: {
      type: 'number',
      format: 'double',
    },
    call_options: {
      $ref: '#/components/schemas/PutCallOptionChainData',
    },
    put_options: {
      $ref: '#/components/schemas/PutCallOptionChainData',
    },
  },
  description: 'Response data for option chain data',
} as const;

export const $PutCallOptionChainData = {
  type: 'object',
  properties: {
    instrument_key: {
      type: 'string',
    },
    market_data: {
      $ref: '#/components/schemas/MarketData',
    },
    option_greeks: {
      $ref: '#/components/schemas/AnalyticsData',
    },
  },
} as const;

export const $ExchangeTimingData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
    },
    start_time: {
      type: 'integer',
      format: 'int64',
    },
    end_time: {
      type: 'integer',
      format: 'int64',
    },
  },
} as const;

export const $GetExchangeTimingResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for exchange timing list',
      items: {
        $ref: '#/components/schemas/ExchangeTimingData',
      },
    },
  },
} as const;

export const $GetMarketStatusResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/MarketStatusData',
    },
  },
} as const;

export const $MarketStatusData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    last_updated: {
      type: 'integer',
      format: 'int64',
    },
  },
  description: 'Response data for market live status',
} as const;

export const $GetHolidayResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      description: 'Response data for holiday list',
      items: {
        $ref: '#/components/schemas/HolidayData',
      },
    },
  },
} as const;

export const $HolidayData = {
  type: 'object',
  properties: {
    date: {
      type: 'string',
      format: 'date-time',
    },
    description: {
      type: 'string',
    },
    holiday_type: {
      type: 'string',
      enum: ['ALL', 'SETTLEMENT_HOLIDAY', 'TRADING_HOLIDAY', 'SPECIAL_TIMING'],
    },
    closed_exchanges: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    open_exchanges: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ExchangeTimingData',
      },
    },
  },
  description: 'Response data for holiday list',
} as const;

export const $Depth = {
  type: 'object',
  properties: {
    quantity: {
      type: 'integer',
      description: 'quantity',
      format: 'int32',
    },
    price: {
      type: 'number',
      description: 'price',
      format: 'double',
    },
    orders: {
      type: 'integer',
      description: 'orders',
      format: 'int32',
    },
  },
  description: 'Asks',
  readOnly: true,
  example: 120.01,
} as const;

export const $DepthMap = {
  type: 'object',
  properties: {
    buy: {
      type: 'array',
      description: 'Bids',
      readOnly: true,
      example: 120.01,
      items: {
        $ref: '#/components/schemas/Depth',
      },
    },
    sell: {
      type: 'array',
      description: 'Asks',
      readOnly: true,
      example: 120.01,
      items: {
        $ref: '#/components/schemas/Depth',
      },
    },
  },
} as const;

export const $GetFullMarketQuoteResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/MarketQuoteSymbol',
      },
    },
  },
} as const;

export const $MarketQuoteSymbol = {
  type: 'object',
  properties: {
    ohlc: {
      $ref: '#/components/schemas/Ohlc',
    },
    depth: {
      $ref: '#/components/schemas/DepthMap',
    },
    timestamp: {
      type: 'string',
      description: 'Time in milliseconds at which the feeds was updated',
      readOnly: true,
      example: '2022-11-16 06:14:48',
    },
    instrument_token: {
      type: 'string',
      description: 'Key issued by Upstox for the instrument',
      readOnly: true,
      example: 'NSE_EQ|INE160A01022',
    },
    symbol: {
      type: 'string',
      description: 'Shows the trading symbol of the instrument',
      readOnly: true,
      example: 'NHPC',
    },
    last_price: {
      type: 'number',
      description: 'The last traded price of symbol',
      format: 'double',
      readOnly: true,
      example: 120.01,
    },
    volume: {
      type: 'integer',
      description: 'The volume traded today on symbol',
      format: 'int64',
      readOnly: true,
      example: 2344451,
    },
    average_price: {
      type: 'number',
      description: 'Average price',
      format: 'double',
      readOnly: true,
      example: 120.01,
    },
    oi: {
      type: 'number',
      description: 'Total number of outstanding contracts held by market participants exchange-wide (only F&O)',
      format: 'double',
      readOnly: true,
      example: 0,
    },
    net_change: {
      type: 'number',
      description: "The absolute change from yesterday's close to last traded price",
      format: 'double',
      readOnly: true,
      example: 0.01,
    },
    total_buy_quantity: {
      type: 'number',
      description: 'The total number of bid quantity available for trading',
      format: 'double',
      readOnly: true,
      example: 0,
    },
    total_sell_quantity: {
      type: 'number',
      description: 'The total number of ask quantity available for trading',
      format: 'double',
      readOnly: true,
      example: 0,
    },
    lower_circuit_limit: {
      type: 'number',
      description: 'The lower circuit of symbol',
      format: 'double',
      readOnly: true,
      example: 119,
    },
    upper_circuit_limit: {
      type: 'number',
      description: 'The upper circuit of symbol',
      format: 'double',
      readOnly: true,
      example: 121,
    },
    last_trade_time: {
      type: 'string',
      description: 'Time in milliseconds at which last trade happened',
      readOnly: true,
      example: '2022-11-16 06:14:48',
    },
    oi_day_high: {
      type: 'number',
      format: 'double',
      readOnly: true,
      example: 0,
    },
    oi_day_low: {
      type: 'number',
      format: 'double',
      readOnly: true,
      example: 0,
    },
  },
} as const;

export const $Ohlc = {
  type: 'object',
  properties: {
    open: {
      type: 'number',
      description: 'The open price of the trading session',
      format: 'double',
      readOnly: true,
      example: 120.01,
    },
    high: {
      type: 'number',
      description: 'The high price of the trading session',
      format: 'double',
      readOnly: true,
      example: 121,
    },
    low: {
      type: 'number',
      description: 'The low price of the trading session',
      format: 'double',
      readOnly: true,
      example: 119,
    },
    close: {
      type: 'number',
      description: 'The close price of the symbol from the previous session of trading',
      format: 'double',
      readOnly: true,
      example: 120,
    },
  },
} as const;

export const $GetMarketQuoteOHLCResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/MarketQuoteOHLC',
      },
    },
  },
} as const;

export const $MarketQuoteOHLC = {
  type: 'object',
  properties: {
    ohlc: {
      $ref: '#/components/schemas/Ohlc',
    },
    last_price: {
      type: 'number',
      description: 'The last traded price of symbol',
      format: 'float',
      readOnly: true,
      example: 120.01,
    },
    instrument_token: {
      type: 'string',
    },
  },
} as const;

export const $GetMarketQuoteLastTradedPriceResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/MarketQuoteSymbolLtp',
      },
    },
  },
} as const;

export const $MarketQuoteSymbolLtp = {
  type: 'object',
  properties: {
    last_price: {
      type: 'number',
      description: 'The last traded price of symbol',
      format: 'double',
      readOnly: true,
      example: 120.01,
    },
    instrument_token: {
      type: 'string',
    },
  },
} as const;

export const $GetHistoricalCandleResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/HistoricalCandleData',
    },
  },
} as const;

export const $HistoricalCandleData = {
  type: 'object',
  properties: {
    candles: {
      type: 'array',
      readOnly: true,
      example: '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
      items: {
        type: 'array',
        readOnly: true,
        example:
          '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
        items: {
          type: 'object',
          readOnly: true,
          example:
            '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
        },
      },
    },
  },
  description: 'Get OHLC values for all instruments across various timeframes',
} as const;

export const $GetIntraDayCandleResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/IntraDayCandleData',
    },
  },
} as const;

export const $IntraDayCandleData = {
  type: 'object',
  properties: {
    candles: {
      type: 'array',
      readOnly: true,
      example: '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
      items: {
        type: 'array',
        readOnly: true,
        example:
          '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
        items: {
          type: 'object',
          readOnly: true,
          example:
            '[[<br> "2022-11-21T00:00:00+05:30",<br> 37.4,<br> 37.8,<br> 36.95,<br> 37.6,<br> 5539471,<br> 0<br> ]]',
        },
      },
    },
  },
  description: 'Get OHLC values for all instruments across various timeframes',
} as const;

export const $WebsocketAuthRedirectResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/WebsocketAuthRedirectResponseData',
    },
  },
} as const;

export const $WebsocketAuthRedirectResponseData = {
  type: 'object',
  properties: {
    authorizedRedirectUri: {
      type: 'string',
      deprecated: true,
    },
    authorized_redirect_uri: {
      type: 'string',
    },
  },
  description: 'Response data for WebsocketAuthRedirectResponse',
} as const;

export const $TradeHistoryResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TradeHistoryResponseTradeData',
      },
    },
    metaData: {
      $ref: '#/components/schemas/TradeHistoryResponseMetaData',
    },
  },
} as const;

export const $TradeHistoryResponseMetaData = {
  type: 'object',
  properties: {
    page: {
      $ref: '#/components/schemas/TradeHistoryResponsePageData',
    },
  },
} as const;

export const $TradeHistoryResponsePageData = {
  type: 'object',
  properties: {
    page_number: {
      type: 'integer',
      format: 'int32',
    },
    page_size: {
      type: 'integer',
      format: 'int32',
    },
    total_records: {
      type: 'integer',
      format: 'int32',
    },
    total_pages: {
      type: 'integer',
      format: 'int32',
    },
  },
} as const;

export const $TradeHistoryResponseTradeData = {
  type: 'object',
  properties: {
    exchange: {
      type: 'string',
    },
    segment: {
      type: 'string',
    },
    option_type: {
      type: 'string',
    },
    quantity: {
      type: 'integer',
      format: 'int32',
    },
    amount: {
      type: 'number',
      format: 'float',
    },
    trade_id: {
      type: 'string',
    },
    trade_date: {
      type: 'string',
    },
    transaction_type: {
      type: 'string',
    },
    scrip_name: {
      type: 'string',
    },
    strike_price: {
      type: 'string',
    },
    expiry: {
      type: 'string',
    },
    price: {
      type: 'number',
      format: 'float',
    },
    isin: {
      type: 'string',
    },
    symbol: {
      type: 'string',
    },
    instrument_token: {
      type: 'string',
    },
  },
} as const;

export const $BrokerageData = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
      description: 'Total charges for the order',
      format: 'float',
      readOnly: true,
    },
    brokerage: {
      type: 'number',
      description: 'Brokerage charges for the order',
      format: 'float',
      readOnly: true,
    },
    taxes: {
      $ref: '#/components/schemas/BrokerageTaxes',
    },
    otherTaxes: {
      $ref: '#/components/schemas/OtherTaxes',
    },
    dpPlan: {
      $ref: '#/components/schemas/DpPlan',
    },
    other_charges: {
      $ref: '#/components/schemas/OtherTaxes',
    },
    dp_plan: {
      $ref: '#/components/schemas/DpPlan',
    },
  },
  description: 'Response data for charges details',
} as const;

export const $BrokerageTaxes = {
  type: 'object',
  properties: {
    gst: {
      type: 'number',
      description: 'GST charges',
      format: 'float',
    },
    stt: {
      type: 'number',
      description: 'STT charges',
      format: 'float',
    },
    stamp_duty: {
      type: 'number',
      description: 'Stamp duty charges',
      format: 'float',
    },
  },
  description: 'Taxes levied on order',
  readOnly: true,
} as const;

export const $BrokerageWrapperData = {
  type: 'object',
  properties: {
    charges: {
      $ref: '#/components/schemas/BrokerageData',
    },
  },
  description: 'Response data for brokerage',
} as const;

export const $DpPlan = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'Name',
    },
    min_expense: {
      type: 'number',
      description: 'Minimum expense charges',
      format: 'float',
    },
  },
} as const;

export const $GetBrokerageResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/BrokerageWrapperData',
    },
  },
} as const;

export const $OtherTaxes = {
  type: 'object',
  properties: {
    transaction: {
      type: 'number',
      description: 'Transaction charges',
      format: 'float',
    },
    clearing: {
      type: 'number',
      description: 'Clearing charges',
      format: 'float',
    },
    ipft: {
      type: 'number',
      description: 'IPF charges',
      format: 'float',
    },
    sebi_turnover: {
      type: 'number',
      description: 'SEBI turnover charges',
      format: 'float',
    },
  },
} as const;

export const $CancelOrderData = {
  type: 'object',
  properties: {
    order_id: {
      type: 'string',
      description: 'Reference order ID',
      readOnly: true,
      example: '1644490272000',
    },
  },
  description: 'Response data for Cancel order request',
} as const;

export const $CancelOrderResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      $ref: '#/components/schemas/CancelOrderData',
    },
  },
} as const;

export const $LogoutResponse = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
    },
    data: {
      type: 'boolean',
      description: 'Logout status',
    },
  },
} as const;

export const $OAuthClientException = {
  type: 'object',
  properties: {
    cause: {
      type: 'object',
      properties: {
        stackTrace: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              classLoaderName: {
                type: 'string',
              },
              moduleName: {
                type: 'string',
              },
              moduleVersion: {
                type: 'string',
              },
              methodName: {
                type: 'string',
              },
              fileName: {
                type: 'string',
              },
              lineNumber: {
                type: 'integer',
                format: 'int32',
              },
              className: {
                type: 'string',
              },
              nativeMethod: {
                type: 'boolean',
              },
            },
          },
        },
        message: {
          type: 'string',
        },
        suppressed: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              stackTrace: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    classLoaderName: {
                      type: 'string',
                    },
                    moduleName: {
                      type: 'string',
                    },
                    moduleVersion: {
                      type: 'string',
                    },
                    methodName: {
                      type: 'string',
                    },
                    fileName: {
                      type: 'string',
                    },
                    lineNumber: {
                      type: 'integer',
                      format: 'int32',
                    },
                    className: {
                      type: 'string',
                    },
                    nativeMethod: {
                      type: 'boolean',
                    },
                  },
                },
              },
              message: {
                type: 'string',
              },
              localizedMessage: {
                type: 'string',
              },
            },
          },
        },
        localizedMessage: {
          type: 'string',
        },
      },
    },
    stackTrace: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          classLoaderName: {
            type: 'string',
          },
          moduleName: {
            type: 'string',
          },
          moduleVersion: {
            type: 'string',
          },
          methodName: {
            type: 'string',
          },
          fileName: {
            type: 'string',
          },
          lineNumber: {
            type: 'integer',
            format: 'int32',
          },
          className: {
            type: 'string',
          },
          nativeMethod: {
            type: 'boolean',
          },
        },
      },
    },
    message: {
      type: 'string',
    },
    suppressed: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          stackTrace: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                classLoaderName: {
                  type: 'string',
                },
                moduleName: {
                  type: 'string',
                },
                moduleVersion: {
                  type: 'string',
                },
                methodName: {
                  type: 'string',
                },
                fileName: {
                  type: 'string',
                },
                lineNumber: {
                  type: 'integer',
                  format: 'int32',
                },
                className: {
                  type: 'string',
                },
                nativeMethod: {
                  type: 'boolean',
                },
              },
            },
          },
          message: {
            type: 'string',
          },
          localizedMessage: {
            type: 'string',
          },
        },
      },
    },
    localizedMessage: {
      type: 'string',
    },
  },
} as const;
