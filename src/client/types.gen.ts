// This file is auto-generated by @hey-api/openapi-ts

export type ApiGatewayErrorResponse = {
    status?: 'success' | 'error';
    errors?: Array<Problem>;
};

export enum status {
    SUCCESS = 'success',
    ERROR = 'error'
}

export type Problem = {
    /**
     * Unique code for the error state
     * @deprecated
     */
    errorCode?: string;
    /**
     * Verbose message for the error state
     */
    message?: string;
    /**
     * Path to property failing validation
     * @deprecated
     */
    propertyPath?: string;
    /**
     * Invalid value for the property failing validation
     * @deprecated
     */
    invalidValue?: {
        [key: string]: unknown;
    };
    error_code?: string;
    property_path?: string;
    invalid_value?: {
        [key: string]: unknown;
    };
};

export type ConvertPositionRequest = {
    /**
     * Key of the instrument
     */
    instrument_token: string;
    /**
     * Indicates the new product to use for the convert positions
     */
    new_product: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * Indicates the old product to use for the convert positions
     */
    old_product: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * Indicates whether its a buy(b) or sell(s) order
     */
    transaction_type: 'BUY' | 'SELL';
    /**
     * Quantity with which the position to convert
     */
    quantity: number;
};

/**
 * Indicates the new product to use for the convert positions
 */
export enum new_product {
    I = 'I',
    D = 'D',
    CO = 'CO',
    OCO = 'OCO',
    MTF = 'MTF'
}

/**
 * Indicates the old product to use for the convert positions
 */
export enum old_product {
    I = 'I',
    D = 'D',
    CO = 'CO',
    OCO = 'OCO',
    MTF = 'MTF'
}

/**
 * Indicates whether its a buy(b) or sell(s) order
 */
export enum transaction_type {
    BUY = 'BUY',
    SELL = 'SELL'
}

/**
 * Response data for convert position request
 */
export type ConvertPositionData = {
    /**
     * Status message for convert position request
     */
    readonly status?: string;
};

export type ConvertPositionResponse = {
    status?: 'success' | 'error';
    data?: ConvertPositionData;
};

export type ModifyOrderRequest = {
    /**
     * Quantity with which the order was placed
     */
    quantity?: number;
    /**
     * Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
     */
    validity: 'DAY' | 'IOC';
    /**
     * Price at which the order was placed
     */
    price: number;
    /**
     * The order ID for which the order must be modified
     */
    order_id: string;
    /**
     * Type of order. It can be one of the following
     * MARKET refers to market order
     * LIMILT refers to Limit Order
     * SL refers to Stop Loss Limit
     * SL-M refers to Stop Loss Market
     */
    order_type: 'MARKET' | 'LIMIT' | 'SL' | 'SL-M';
    /**
     * The quantity that should be disclosed in the market depth
     */
    disclosed_quantity?: number;
    /**
     * If the order is a stop loss order then the trigger price to be set is mentioned here
     */
    trigger_price: number;
};

/**
 * Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
 */
export enum validity {
    DAY = 'DAY',
    IOC = 'IOC'
}

/**
 * Type of order. It can be one of the following
 * MARKET refers to market order
 * LIMILT refers to Limit Order
 * SL refers to Stop Loss Limit
 * SL-M refers to Stop Loss Market
 */
export enum order_type {
    MARKET = 'MARKET',
    LIMIT = 'LIMIT',
    SL = 'SL',
    SL_M = 'SL-M'
}

/**
 * Response data for modify order request
 */
export type ModifyOrderData = {
    /**
     * Order ID
     */
    readonly order_id?: string;
};

export type ModifyOrderResponse = {
    status?: 'success' | 'error';
    data?: ModifyOrderData;
};

export type PlaceOrderRequest = {
    /**
     * Quantity with which the order is to be placed
     */
    quantity: number;
    /**
     * Signifies if the order was either Intraday, Delivery, CO or OCO
     */
    product: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * It can be one of the following - DAY(default), IOC
     */
    validity: 'DAY' | 'IOC';
    /**
     * Price at which the order will be placed
     */
    price: number;
    /**
     * Tag for a particular order
     */
    tag?: string;
    /**
     * Key of the instrument
     */
    instrument_token: string;
    /**
     * Type of order. It can be one of the following
     * MARKET refers to market order
     * LIMIT refers to Limit Order
     * SL refers to Stop Loss Limit
     * SL-M refers to Stop Loss Market
     */
    order_type: 'MARKET' | 'LIMIT' | 'SL' | 'SL-M';
    /**
     * Indicates whether its a buy or sell order
     */
    transaction_type: 'BUY' | 'SELL';
    /**
     * The quantity that should be disclosed in the market depth
     */
    disclosed_quantity: number;
    /**
     * If the order is a stop loss order then the trigger price to be set is mentioned here
     */
    trigger_price: number;
    /**
     * Signifies if the order is an After Market Order
     */
    is_amo: boolean;
};

/**
 * Signifies if the order was either Intraday, Delivery, CO or OCO
 */
export enum product {
    I = 'I',
    D = 'D',
    CO = 'CO',
    OCO = 'OCO',
    MTF = 'MTF'
}

/**
 * Response data for place order request
 */
export type PlaceOrderData = {
    /**
     * An order ID for the order request placed
     */
    readonly order_id?: string;
};

export type PlaceOrderResponse = {
    status?: 'success' | 'error';
    data?: PlaceOrderData;
};

export type TokenRequest = {
    code: string;
    /**
     * OAuth API key that is a public identifier for app
     */
    client_id: string;
    /**
     * OAuth client secret that is a private secret known only to app and authorization server
     */
    client_secret: string;
    /**
     * Authorization server will redirect the user back to the application via redirect url
     */
    redirect_uri: string;
    /**
     * Type of grant used to get an access token
     */
    grant_type: string;
};

export type TokenResponse = {
    /**
     * E-mail address of the user
     */
    readonly email?: string;
    /**
     * Lists the exchanges to which the user has access
     */
    readonly exchanges?: Array<('NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM')>;
    /**
     * Lists the products types to which the user has access
     */
    readonly products?: Array<('I' | 'D' | 'CO' | 'OCO' | 'MTF')>;
    /**
     * The broker ID
     */
    readonly broker?: string;
    /**
     * Uniquely identifies the user
     */
    readonly user_id?: string;
    /**
     * Name of the user
     */
    readonly user_name?: string;
    /**
     * Order types enabled for the user
     */
    readonly order_types?: Array<('MARKET' | 'LIMIT' | 'SL' | 'SL-M')>;
    /**
     *
     * Identifies the user's registered role at the broker. This will be individual for all retail users
     */
    readonly user_type?: string;
    /**
     *
     * To depict if the user has given power of attorney for transactions
     */
    readonly poa?: boolean;
    /**
     *
     * Whether the status of account is active or not
     */
    readonly is_active?: boolean;
    /**
     * The authentication token that is to used with every subsequent API requests
     */
    readonly access_token?: string;
    /**
     * An extended authentication token with a prolonged validity period, intended for specific API requests. Ensure you use this token only with the designated set of APIs.
     */
    readonly extended_token?: string;
};

export type GetProfileResponse = {
    status?: 'success' | 'error';
    data?: ProfileData;
};

/**
 * Response data for user profile
 */
export type ProfileData = {
    /**
     * E-mail address of the user
     */
    readonly email?: string;
    /**
     * Lists the exchanges to which the user has access
     */
    readonly exchanges?: Array<('NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM')>;
    /**
     * Lists the products types to which the user has access
     */
    readonly products?: Array<('I' | 'D' | 'CO' | 'OCO' | 'MTF')>;
    /**
     * The broker ID
     */
    readonly broker?: string;
    /**
     * Uniquely identifies the user
     */
    readonly user_id?: string;
    /**
     * Name of the user
     */
    readonly user_name?: string;
    /**
     * Order types enabled for the user
     */
    readonly order_types?: Array<('MARKET' | 'LIMIT' | 'SL' | 'SL-M')>;
    /**
     *
     * Identifies the user's registered role at the broker. This will be individual for all retail users
     */
    readonly user_type?: string;
    /**
     *
     * To depict if the user has given power of attorney for transactions
     */
    readonly poa?: boolean;
    /**
     *
     * Whether the status of account is active or not
     */
    readonly is_active?: boolean;
};

export type GetUserFundMarginResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for Balance
     */
    data?: {
        [key: string]: UserFundMarginData;
    };
};

/**
 * Response data for Balance
 */
export type UserFundMarginData = {
    /**
     * Positive values denote the amount blocked into an Open order or position.
     * Negative value denotes the amount being released.
     */
    readonly used_margin?: number;
    /**
     * Instant payin will reflect here
     */
    readonly payin_amount?: number;
    /**
     * Amount blocked on futures and options towards SPAN
     */
    readonly span_margin?: number;
    /**
     * Payin amount credited through a manual process
     */
    readonly adhoc_margin?: number;
    /**
     * The amount maintained for withdrawal
     */
    readonly notional_cash?: number;
    /**
     * Total margin available for trading
     */
    readonly available_margin?: number;
    /**
     * Amount blocked on futures and options towards Exposure
     */
    readonly exposure_margin?: number;
};

export type GetTradeWiseProfitAndLossMetaDataResponse = {
    status?: 'success' | 'error';
    data?: TradeWiseMetaData;
};

/**
 * Response data for brokerage
 */
export type TradeWiseMetaData = {
    /**
     * Total count of trades in the trade wise P and L report
     */
    readonly trades_count?: number;
    /**
     * Maximum number of trades in a page of the trade wise P and L report API
     */
    readonly page_size_limit?: number;
};

export type GetTradeWiseProfitAndLossDataResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for trade wise data details
     */
    data?: Array<TradeWiseProfitAndLossData>;
    metadata?: ProfitAndLossMetaDataWrapper;
};

/**
 * Meta data for trade wise data details
 */
export type ProfitAndLossMetaData = {
    /**
     * pageNumber for pagination
     */
    readonly page_number?: number;
    /**
     * Page size
     */
    readonly page_size?: number;
};

export type ProfitAndLossMetaDataWrapper = {
    page?: ProfitAndLossMetaData;
};

/**
 * Response data for trade wise data details
 */
export type TradeWiseProfitAndLossData = {
    /**
     * The quantity of stock traded
     */
    readonly quantity?: number;
    /**
     * ISIN of the stock
     */
    readonly isin?: string;
    /**
     * Name of the scrip traded
     */
    readonly scrip_name?: string;
    /**
     * FUT - Futures
     *
     * OPT - Options
     *
     * EQ - Equity
     */
    readonly trade_type?: string;
    /**
     * The date on which the stock was bought
     */
    readonly buy_date?: string;
    /**
     * The average rate at which each quantity of the stock was bought
     */
    readonly buy_average?: number;
    /**
     * The date on which the stock was sold
     */
    readonly sell_date?: string;
    /**
     * The average rate at which each quantity of the stock was sold
     */
    readonly sell_average?: number;
    /**
     * Total buy amount
     */
    readonly buy_amount?: number;
    /**
     * Total sell amount
     */
    readonly sell_amount?: number;
};

export type GetProfitAndLossChargesResponse = {
    status?: 'success' | 'error';
    data?: ProfitAndLossChargesWrapperData;
};

/**
 * Response data for charges details
 */
export type ProfitAndLossChargesData = {
    /**
     *  Total charges for the user
     */
    readonly total?: number;
    /**
     * Brokerage charges for the order
     */
    readonly brokerage?: number;
    taxes?: ProfitAndLossChargesTaxes;
    charges?: ProfitAndLossOtherChargesTaxes;
};

/**
 * Taxes levied on order
 */
export type ProfitAndLossChargesTaxes = {
    /**
     * GST charges
     */
    gst?: number;
    /**
     * STT charges
     */
    stt?: number;
    /**
     * Stamp duty charges
     */
    stamp_duty?: number;
};

/**
 * Response data for brokerage
 */
export type ProfitAndLossChargesWrapperData = {
    charges_breakdown?: ProfitAndLossChargesData;
};

/**
 * Other charges levied
 */
export type ProfitAndLossOtherChargesTaxes = {
    /**
     * transaction charges
     */
    transaction?: number;
    /**
     * clearing charges
     */
    clearing?: number;
    /**
     * IPF charges
     */
    ipft?: number;
    /**
     * others charges
     */
    others?: number;
    /**
     * SEBI turnover
     */
    sebi_turnover?: number;
    /**
     * demat transaction charges
     */
    demat_transaction?: number;
};

export type GetPositionResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for position details
     */
    data?: Array<PositionData>;
};

/**
 * Response data for position details
 */
export type PositionData = {
    /**
     * Exchange to which the order is associated
     */
    readonly exchange?: 'NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM';
    /**
     * The quantity/lot size multiplier used for calculating P&Ls
     */
    readonly multiplier?: number;
    /**
     * Net value of the position
     */
    readonly value?: number;
    /**
     * Profit and loss - net returns on the position
     */
    readonly pnl?: number;
    /**
     * Shows if the order was either Intraday, Delivery, CO or OCO
     */
    readonly product?: string;
    /**
     * Key issued by Upstox for the instrument
     */
    readonly instrument_token?: string;
    /**
     * Average price at which the net position quantity was acquired
     */
    readonly average_price?: number;
    /**
     * Net value of the bought quantities
     */
    readonly buy_value?: number;
    /**
     * Quantity held previously and carried forward over night
     */
    readonly overnight_quantity?: number;
    /**
     * Amount at which the quantity is bought during the day
     */
    readonly day_buy_value?: number;
    /**
     * Average price at which the day qty was bought. Default is empty string
     */
    readonly day_buy_price?: number;
    /**
     * Amount at which the quantity was bought in the previous session
     */
    readonly overnight_buy_amount?: number;
    /**
     * Quantity bought in the previous session
     */
    readonly overnight_buy_quantity?: number;
    /**
     * Quantity bought during the day
     */
    readonly day_buy_quantity?: number;
    /**
     * Amount at which the quantity is sold during the day
     */
    readonly day_sell_value?: number;
    /**
     * Average price at which the day quantity was sold
     */
    readonly day_sell_price?: number;
    /**
     * Amount at which the quantity was sold in the previous session
     */
    readonly overnight_sell_amount?: number;
    /**
     * Quantity sold short in the previous session
     */
    readonly overnight_sell_quantity?: number;
    /**
     * Quantity sold during the day
     */
    readonly day_sell_quantity?: number;
    /**
     * Quantity left after nullifying Day and CF buy quantity towards Day and CF sell quantity
     */
    readonly quantity?: number;
    /**
     * Last traded market price of the instrument
     */
    readonly last_price?: number;
    /**
     * Day PnL generated against open positions
     */
    readonly unrealised?: number;
    /**
     * Day PnL generated against closed positions
     */
    readonly realised?: number;
    /**
     * Net value of the sold quantities
     */
    readonly sell_value?: number;
    /**
     * Shows the trading symbol of the instrument
     * @deprecated
     */
    readonly tradingsymbol?: string;
    /**
     * Shows the trading symbol of the instrument
     */
    readonly trading_symbol?: string;
    /**
     * Closing price of the instrument from the last trading day
     */
    readonly close_price?: number;
    /**
     * Average price at which quantities were bought
     */
    readonly buy_price?: number;
    /**
     * Average price at which quantities were sold
     */
    readonly sell_price?: number;
};

/**
 * Exchange to which the order is associated
 */
export enum exchange {
    NSE = 'NSE',
    NFO = 'NFO',
    CDS = 'CDS',
    BSE = 'BSE',
    BFO = 'BFO',
    BCD = 'BCD',
    MCX = 'MCX',
    NSCOM = 'NSCOM'
}

export type GetHoldingsResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for holdings
     */
    data?: Array<HoldingsData>;
};

/**
 * Response data for holdings
 */
export type HoldingsData = {
    /**
     * The standard ISIN representing stocks listed on multiple exchanges
     */
    readonly isin?: string;
    /**
     * Quantity either blocked towards open or completed order
     */
    readonly cnc_used_quantity?: number;
    /**
     * Category of collateral assigned by RMS
     */
    readonly collateral_type?: string;
    /**
     * Name of the company
     */
    readonly company_name?: string;
    /**
     * This is the haircut percentage applied from RMS (applicable incase of collateral)
     */
    readonly haircut?: number;
    /**
     * Shows if the order was either Intraday, Delivery, CO or OCO
     */
    readonly product?: string;
    /**
     * The total holding qty
     */
    readonly quantity?: number;
    /**
     * Shows the trading symbol of the instrument
     * @deprecated
     */
    readonly tradingsymbol?: string;
    /**
     * The last traded price of the instrument
     */
    readonly last_price?: number;
    /**
     * Closing price of the instrument from the last trading day
     */
    readonly close_price?: number;
    /**
     * Profit and Loss
     */
    readonly pnl?: number;
    /**
     * Day's change in absolute value for the stock
     */
    readonly day_change?: number;
    /**
     * Day's change in percentage for the stock
     */
    readonly day_change_percentage?: number;
    /**
     * Key issued by Upstox for the instrument
     */
    readonly instrument_token?: string;
    /**
     * Average price at which the net holding quantity was acquired
     */
    readonly average_price?: number;
    /**
     * Quantity marked as collateral by RMS on users request
     */
    readonly collateral_quantity?: number;
    readonly collateral_update_quantity?: number;
    /**
     * Shows the trading symbol of the instrument
     */
    readonly trading_symbol?: string;
    /**
     * Quantity on T+1 day after order execution
     */
    readonly t1_quantity?: number;
    /**
     * Exchange of the trading symbol
     */
    readonly exchange?: 'NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM';
};

export type GetTradeResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for trades
     */
    data?: Array<TradeData>;
};

/**
 * Response data for trades
 */
export type TradeData = {
    /**
     * Exchange to which the order is associated
     */
    readonly exchange?: 'NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM';
    /**
     * Shows if the order was either Intraday, Delivery, CO or OCO
     */
    readonly product?: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * Shows the trading symbol which could be a combination of symbol name, instrument, expiry date etc
     * @deprecated
     */
    readonly tradingsymbol?: string;
    /**
     * Shows the trading symbol which could be a combination of symbol name, instrument, expiry date etc
     */
    readonly trading_symbol?: string;
    /**
     * Identifier issued by Upstox used for subscribing to live market quotes
     */
    readonly instrument_token?: string;
    /**
     * Type of order. It can be one of the following
     * MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market
     */
    readonly order_type?: 'MARKET' | 'LIMIT' | 'SL' | 'SL-M';
    /**
     * Indicates whether the order was a buy or sell order
     */
    readonly transaction_type?: 'BUY' | 'SELL';
    /**
     * The total quantity traded from this particular order
     */
    readonly quantity?: number;
    /**
     * Unique order ID assigned by the exchange for the order placed
     */
    readonly exchange_order_id?: string;
    /**
     * Unique order ID assigned internally for the order placed
     */
    readonly order_id?: string;
    /**
     * User readable time at when the trade occurred
     */
    readonly exchange_timestamp?: string;
    /**
     * Price at which the traded quantity is traded
     */
    readonly average_price?: number;
    /**
     * Trade ID generated from exchange towards traded transaction
     */
    readonly trade_id?: string;
    /**
     * The order reference ID for which the order must be modified
     */
    readonly order_ref_id?: string;
    /**
     * User readable timestamp at which the order was placed
     */
    readonly order_timestamp?: string;
};

export type GetOrderBookResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for order Book
     */
    data?: Array<OrderBookData>;
};

/**
 * Response data for order Book
 */
export type OrderBookData = {
    /**
     * Exchange to which the order is associated
     */
    readonly exchange?: 'NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM';
    /**
     * Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther
     */
    readonly product?: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * Price at which the order was placed
     */
    readonly price?: number;
    /**
     * Quantity with which the order was placed
     */
    readonly quantity?: number;
    /**
     * Indicates the current status of the order. Valid order status’ are outlined in the table below
     */
    readonly status?: string;
    readonly guid?: string;
    /**
     * Tag to uniquely identify an order
     */
    readonly tag?: string;
    /**
     * Identifier issued by Upstox used for subscribing to live market quotes
     */
    readonly instrument_token?: string;
    /**
     * Uniquely identifies the user
     */
    readonly placed_by?: string;
    /**
     * Shows the trading symbol of the instrument
     * @deprecated
     */
    readonly tradingsymbol?: string;
    /**
     * Shows the trading symbol of the instrument
     */
    readonly trading_symbol?: string;
    /**
     * Type of order. It can be one of the following
     * MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market
     */
    readonly order_type?: 'MARKET' | 'LIMIT' | 'SL' | 'SL-M';
    /**
     * Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
     */
    readonly validity?: 'DAY' | 'IOC' | 'EOS';
    /**
     * If the order was a stop loss order then the trigger price set is mentioned here
     */
    readonly trigger_price?: number;
    /**
     * The quantity that should be disclosed in the market depth
     */
    readonly disclosed_quantity?: number;
    /**
     * Indicates whether the order was a buy or sell order
     */
    readonly transaction_type?: 'BUY' | 'SELL';
    /**
     * Average price at which the qty got traded
     */
    readonly average_price?: number;
    /**
     * The total quantity traded from this particular order
     */
    readonly filled_quantity?: number;
    /**
     * Pending quantity to be filled
     */
    readonly pending_quantity?: number;
    /**
     * Indicates the reason when any order is rejected, not modified or cancelled
     */
    readonly status_message?: string;
    /**
     * Description of the order's status as received from RMS
     */
    readonly status_message_raw?: string;
    /**
     * Unique order ID assigned by the exchange for the order placed
     */
    readonly exchange_order_id?: string;
    /**
     * In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here
     */
    readonly parent_order_id?: string;
    /**
     * Unique order ID assigned internally for the order placed
     */
    readonly order_id?: string;
    /**
     * Order complexity
     */
    readonly variety?: string;
    /**
     * User readable timestamp at which the order was placed
     */
    readonly order_timestamp?: string;
    /**
     * User readable time at which the order was placed or updated
     */
    readonly exchange_timestamp?: string;
    /**
     * Signifies if the order is an After Market Order
     */
    readonly is_amo?: boolean;
    /**
     * Apart from 1st order it shows the count of how many requests were sent
     */
    readonly order_request_id?: string;
    /**
     * The order reference ID for which the order must be modified
     */
    readonly order_ref_id?: string;
};

/**
 * Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
 */
export enum validity2 {
    DAY = 'DAY',
    IOC = 'IOC',
    EOS = 'EOS'
}

export type GetOrderResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for order details
     */
    data?: Array<OrderData>;
};

/**
 * Response data for order details
 */
export type OrderData = {
    /**
     * Exchange to which the order is associated
     */
    readonly exchange?: 'NSE' | 'NFO' | 'CDS' | 'BSE' | 'BFO' | 'BCD' | 'MCX' | 'NSCOM';
    /**
     * Price at which the order was placed
     */
    readonly price?: number;
    /**
     * Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther
     */
    readonly product?: 'I' | 'D' | 'CO' | 'OCO' | 'MTF';
    /**
     * Quantity with which the order was placed
     */
    readonly quantity?: number;
    /**
     * Indicates the current status of the order. Valid order status’ are outlined in the table below
     */
    readonly status?: string;
    /**
     * Tag to uniquely identify an order
     */
    readonly tag?: string;
    /**
     * Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
     */
    readonly validity?: 'DAY' | 'IOC' | 'EOS';
    /**
     * Average price at which the qty got traded
     */
    readonly average_price?: number;
    /**
     * The quantity that should be disclosed in the market depth
     */
    readonly disclosed_quantity?: number;
    /**
     * Unique order ID assigned by the exchange for the order placed
     */
    readonly exchange_order_id?: string;
    /**
     * User readable time at which the order was placed or updated
     */
    readonly exchange_timestamp?: string;
    /**
     * Identifier issued by Upstox used for subscribing to live market quotes
     */
    readonly instrument_token?: string;
    /**
     * Signifies if the order is an After Market Order
     */
    readonly is_amo?: boolean;
    /**
     * Indicates the reason when any order is rejected, not modified or cancelled
     */
    readonly status_message?: string;
    /**
     * Unique order ID assigned internally for the order placed
     */
    readonly order_id?: string;
    /**
     * Apart from 1st order it shows the count of how many requests were sent
     */
    readonly order_request_id?: string;
    /**
     * Type of order. It can be one of the following
     * MARKET refers to market order<br>LIMIT refers to Limit Order<br>SL refers to Stop Loss Limit<br>SL-M refers to Stop loss market
     */
    readonly order_type?: 'MARKET' | 'LIMIT' | 'SL' | 'SL-M';
    /**
     * In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here
     */
    readonly parent_order_id?: string;
    /**
     * Shows the trading symbol of the instrument
     * @deprecated
     */
    readonly tradingsymbol?: string;
    /**
     * Shows the trading symbol of the instrument
     */
    readonly trading_symbol?: string;
    /**
     * User readable timestamp at which the order was placed
     */
    readonly order_timestamp?: string;
    /**
     * The total quantity traded from this particular order
     */
    readonly filled_quantity?: number;
    /**
     * Indicates whether the order was a buy or sell order
     */
    readonly transaction_type?: 'BUY' | 'SELL';
    /**
     * If the order was a stop loss order then the trigger price set is mentioned here
     */
    readonly trigger_price?: number;
    /**
     * Uniquely identifies the user
     */
    readonly placed_by?: string;
    /**
     * Order complexity
     */
    readonly variety?: string;
};

export type GetOptionContractResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for option contracts
     */
    data?: Array<InstrumentData>;
};

/**
 * Response data for option contracts
 */
export type InstrumentData = {
    name?: string;
    segment?: string;
    exchange?: string;
    isin?: string;
    expiry?: string;
    country?: string;
    latency?: string;
    description?: string;
    currency?: string;
    weekly?: boolean;
    instrument_key?: string;
    exchange_token?: string;
    trading_symbol?: string;
    short_name?: string;
    tick_size?: number;
    lot_size?: number;
    instrument_type?: string;
    freeze_quantity?: number;
    underlying_key?: string;
    underlying_type?: string;
    underlying_symbol?: string;
    last_trading_date?: string;
    strike_price?: number;
    price_quote_unit?: string;
    qty_multiplier?: number;
    minimum_lot?: number;
    start_time?: string;
    end_time?: string;
    week_days?: string;
    general_denominator?: number;
    general_numerator?: number;
    price_numerator?: number;
    price_denominator?: number;
    mtf_enabled?: boolean;
    mtf_bracket?: number;
    security_type?: string;
};

export type AnalyticsData = {
    vega?: number;
    theta?: number;
    gamma?: number;
    delta?: number;
    iv?: number;
    pop?: number;
};

export type GetOptionChainResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for option chain data
     */
    data?: Array<OptionStrikeData>;
};

export type MarketData = {
    ltp?: number;
    volume?: number;
    oi?: number;
    close_price?: number;
    bid_price?: number;
    bid_qty?: number;
    ask_price?: number;
    ask_qty?: number;
    prev_oi?: number;
};

/**
 * Response data for option chain data
 */
export type OptionStrikeData = {
    expiry?: string;
    pcr?: number;
    strike_price?: number;
    underlying_key?: string;
    underlying_spot_price?: number;
    call_options?: PutCallOptionChainData;
    put_options?: PutCallOptionChainData;
};

export type PutCallOptionChainData = {
    instrument_key?: string;
    market_data?: MarketData;
    option_greeks?: AnalyticsData;
};

export type ExchangeTimingData = {
    exchange?: string;
    start_time?: number;
    end_time?: number;
};

export type GetExchangeTimingResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for exchange timing list
     */
    data?: Array<ExchangeTimingData>;
};

export type GetMarketStatusResponse = {
    status?: 'success' | 'error';
    data?: MarketStatusData;
};

/**
 * Response data for market live status
 */
export type MarketStatusData = {
    exchange?: string;
    status?: string;
    last_updated?: number;
};

export type GetHolidayResponse = {
    status?: 'success' | 'error';
    /**
     * Response data for holiday list
     */
    data?: Array<HolidayData>;
};

/**
 * Response data for holiday list
 */
export type HolidayData = {
    date?: string;
    description?: string;
    holiday_type?: 'ALL' | 'SETTLEMENT_HOLIDAY' | 'TRADING_HOLIDAY' | 'SPECIAL_TIMING';
    closed_exchanges?: Array<(string)>;
    open_exchanges?: Array<ExchangeTimingData>;
};

export enum holiday_type {
    ALL = 'ALL',
    SETTLEMENT_HOLIDAY = 'SETTLEMENT_HOLIDAY',
    TRADING_HOLIDAY = 'TRADING_HOLIDAY',
    SPECIAL_TIMING = 'SPECIAL_TIMING'
}

/**
 * Asks
 */
export type Depth = {
    /**
     * quantity
     */
    quantity?: number;
    /**
     * price
     */
    price?: number;
    /**
     * orders
     */
    orders?: number;
};

export type DepthMap = {
    /**
     * Bids
     */
    readonly buy?: Array<Depth>;
    /**
     * Asks
     */
    readonly sell?: Array<Depth>;
};

export type GetFullMarketQuoteResponse = {
    status?: 'success' | 'error';
    data?: {
        [key: string]: MarketQuoteSymbol;
    };
};

export type MarketQuoteSymbol = {
    ohlc?: Ohlc;
    depth?: DepthMap;
    /**
     * Time in milliseconds at which the feeds was updated
     */
    readonly timestamp?: string;
    /**
     * Key issued by Upstox for the instrument
     */
    readonly instrument_token?: string;
    /**
     * Shows the trading symbol of the instrument
     */
    readonly symbol?: string;
    /**
     * The last traded price of symbol
     */
    readonly last_price?: number;
    /**
     * The volume traded today on symbol
     */
    readonly volume?: number;
    /**
     * Average price
     */
    readonly average_price?: number;
    /**
     * Total number of outstanding contracts held by market participants exchange-wide (only F&O)
     */
    readonly oi?: number;
    /**
     * The absolute change from yesterday's close to last traded price
     */
    readonly net_change?: number;
    /**
     * The total number of bid quantity available for trading
     */
    readonly total_buy_quantity?: number;
    /**
     * The total number of ask quantity available for trading
     */
    readonly total_sell_quantity?: number;
    /**
     * The lower circuit of symbol
     */
    readonly lower_circuit_limit?: number;
    /**
     * The upper circuit of symbol
     */
    readonly upper_circuit_limit?: number;
    /**
     * Time in milliseconds at which last trade happened
     */
    readonly last_trade_time?: string;
    readonly oi_day_high?: number;
    readonly oi_day_low?: number;
};

export type Ohlc = {
    /**
     * The open price of the trading session
     */
    readonly open?: number;
    /**
     * The high price of the trading session
     */
    readonly high?: number;
    /**
     * The low price of the trading session
     */
    readonly low?: number;
    /**
     * The close price of the symbol from the previous session of trading
     */
    readonly close?: number;
};

export type GetMarketQuoteOHLCResponse = {
    status?: 'success' | 'error';
    data?: {
        [key: string]: MarketQuoteOHLC;
    };
};

export type MarketQuoteOHLC = {
    ohlc?: Ohlc;
    /**
     * The last traded price of symbol
     */
    readonly last_price?: number;
    instrument_token?: string;
};

export type GetMarketQuoteLastTradedPriceResponse = {
    status?: 'success' | 'error';
    data?: {
        [key: string]: MarketQuoteSymbolLtp;
    };
};

export type MarketQuoteSymbolLtp = {
    /**
     * The last traded price of symbol
     */
    readonly last_price?: number;
    instrument_token?: string;
};

export type GetHistoricalCandleResponse = {
    status?: 'success' | 'error';
    data?: HistoricalCandleData;
};

/**
 * Get OHLC values for all instruments across various timeframes
 */
export type HistoricalCandleData = {
    readonly candles?: Array<Array<{
        [key: string]: unknown;
    }>>;
};

export type GetIntraDayCandleResponse = {
    status?: 'success' | 'error';
    data?: IntraDayCandleData;
};

/**
 * Get OHLC values for all instruments across various timeframes
 */
export type IntraDayCandleData = {
    readonly candles?: Array<Array<{
        [key: string]: unknown;
    }>>;
};

export type WebsocketAuthRedirectResponse = {
    status?: 'success' | 'error';
    data?: WebsocketAuthRedirectResponseData;
};

/**
 * Response data for WebsocketAuthRedirectResponse
 */
export type WebsocketAuthRedirectResponseData = {
    /**
     * @deprecated
     */
    authorizedRedirectUri?: string;
    authorized_redirect_uri?: string;
};

export type TradeHistoryResponse = {
    status?: 'success' | 'error';
    data?: Array<TradeHistoryResponseTradeData>;
    metaData?: TradeHistoryResponseMetaData;
};

export type TradeHistoryResponseMetaData = {
    page?: TradeHistoryResponsePageData;
};

export type TradeHistoryResponsePageData = {
    page_number?: number;
    page_size?: number;
    total_records?: number;
    total_pages?: number;
};

export type TradeHistoryResponseTradeData = {
    exchange?: string;
    segment?: string;
    option_type?: string;
    quantity?: number;
    amount?: number;
    trade_id?: string;
    trade_date?: string;
    transaction_type?: string;
    scrip_name?: string;
    strike_price?: string;
    expiry?: string;
    price?: number;
    isin?: string;
    symbol?: string;
    instrument_token?: string;
};

/**
 * Response data for charges details
 */
export type BrokerageData = {
    /**
     * Total charges for the order
     */
    readonly total?: number;
    /**
     * Brokerage charges for the order
     */
    readonly brokerage?: number;
    taxes?: BrokerageTaxes;
    otherTaxes?: OtherTaxes;
    dpPlan?: DpPlan;
    other_charges?: OtherTaxes;
    dp_plan?: DpPlan;
};

/**
 * Taxes levied on order
 */
export type BrokerageTaxes = {
    /**
     * GST charges
     */
    gst?: number;
    /**
     * STT charges
     */
    stt?: number;
    /**
     * Stamp duty charges
     */
    stamp_duty?: number;
};

/**
 * Response data for brokerage
 */
export type BrokerageWrapperData = {
    charges?: BrokerageData;
};

export type DpPlan = {
    /**
     * Name
     */
    name?: string;
    /**
     * Minimum expense charges
     */
    min_expense?: number;
};

export type GetBrokerageResponse = {
    status?: 'success' | 'error';
    data?: BrokerageWrapperData;
};

export type OtherTaxes = {
    /**
     * Transaction charges
     */
    transaction?: number;
    /**
     * Clearing charges
     */
    clearing?: number;
    /**
     * IPF charges
     */
    ipft?: number;
    /**
     * SEBI turnover charges
     */
    sebi_turnover?: number;
};

/**
 * Response data for Cancel order request
 */
export type CancelOrderData = {
    /**
     * Reference order ID
     */
    readonly order_id?: string;
};

export type CancelOrderResponse = {
    status?: 'success' | 'error';
    data?: CancelOrderData;
};

export type LogoutResponse = {
    status?: 'success' | 'error';
    /**
     * Logout status
     */
    data?: boolean;
};

export type OAuthClientException = {
    cause?: {
        stackTrace?: Array<{
            classLoaderName?: string;
            moduleName?: string;
            moduleVersion?: string;
            methodName?: string;
            fileName?: string;
            lineNumber?: number;
            className?: string;
            nativeMethod?: boolean;
        }>;
        message?: string;
        suppressed?: Array<{
            stackTrace?: Array<{
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }>;
            message?: string;
            localizedMessage?: string;
        }>;
        localizedMessage?: string;
    };
    stackTrace?: Array<{
        classLoaderName?: string;
        moduleName?: string;
        moduleVersion?: string;
        methodName?: string;
        fileName?: string;
        lineNumber?: number;
        className?: string;
        nativeMethod?: boolean;
    }>;
    message?: string;
    suppressed?: Array<{
        stackTrace?: Array<{
            classLoaderName?: string;
            moduleName?: string;
            moduleVersion?: string;
            methodName?: string;
            fileName?: string;
            lineNumber?: number;
            className?: string;
            nativeMethod?: boolean;
        }>;
        message?: string;
        localizedMessage?: string;
    }>;
    localizedMessage?: string;
};

export type ConvertPositionsData = {
    body: ConvertPositionRequest;
};

export type ConvertPositionsResponse = ConvertPositionResponse;

export type ConvertPositionsError = ApiGatewayErrorResponse;

export type GetPositionsResponse = GetPositionResponse;

export type GetPositionsError = ApiGatewayErrorResponse;

export type GetHoldingsResponse2 = GetHoldingsResponse;

export type GetHoldingsError = ApiGatewayErrorResponse;

export type ModifyOrderData2 = {
    body: ModifyOrderRequest;
};

export type ModifyOrderResponse2 = ModifyOrderResponse;

export type ModifyOrderError = ApiGatewayErrorResponse;

export type PlaceOrderData2 = {
    body: PlaceOrderRequest;
};

export type PlaceOrderResponse2 = PlaceOrderResponse;

export type PlaceOrderError = ApiGatewayErrorResponse;

export type GetTradesByOrderData = {
    query: {
        /**
         * The order ID for which the order to get order trades
         */
        order_id: string;
    };
};

export type GetTradesByOrderResponse = GetTradeResponse;

export type GetTradesByOrderError = ApiGatewayErrorResponse;

export type GetTradeHistoryResponse = GetTradeResponse;

export type GetTradeHistoryError = ApiGatewayErrorResponse;

export type GetOrderBookResponse2 = GetOrderBookResponse;

export type GetOrderBookError = ApiGatewayErrorResponse;

export type GetOrderDetailsData = {
    query?: {
        /**
         * The order reference ID for which the order history is required
         */
        order_id?: string;
        /**
         * The unique tag of the order for which the order history is being requested
         */
        tag?: string;
    };
};

export type GetOrderDetailsResponse = GetOrderResponse;

export type GetOrderDetailsError = ApiGatewayErrorResponse;

export type CancelOrderData2 = {
    query: {
        /**
         * The order ID for which the order must be cancelled
         */
        order_id: string;
    };
};

export type CancelOrderResponse2 = CancelOrderResponse;

export type CancelOrderError = ApiGatewayErrorResponse;

export type TokenData = unknown;

export type TokenResponse2 = TokenResponse;

export type TokenError = ApiGatewayErrorResponse;

export type AuthorizeData = {
    query: {
        client_id: string;
        redirect_uri: string;
        scope?: string;
        state?: string;
    };
};

export type AutoLoginData = {
    query: {
        app_name: string;
        token: string;
    };
};

export type LogoutResponse2 = LogoutResponse;

export type LogoutError = ApiGatewayErrorResponse & OAuthClientException;

export type GetProfileResponse2 = GetProfileResponse;

export type GetProfileError = ApiGatewayErrorResponse;

export type GetUserFundMarginData = {
    query?: {
        segment?: 'SEC' | 'COM';
    };
};

export type GetUserFundMarginResponse2 = GetUserFundMarginResponse;

export type GetUserFundMarginError = ApiGatewayErrorResponse;

export type GetTradeWiseProfitAndLossMetaDataData = {
    query: {
        /**
         * Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
         */
        financial_year: string;
        /**
         * Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        from_date?: string;
        /**
         * Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
         */
        segment: string;
        /**
         * Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        to_date?: string;
    };
};

export type GetTradeWiseProfitAndLossMetaDataResponse2 = GetTradeWiseProfitAndLossMetaDataResponse;

export type GetTradeWiseProfitAndLossMetaDataError = ApiGatewayErrorResponse;

export type GetTradeWiseProfitAndLossDataData = {
    query: {
        /**
         * Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
         */
        financial_year: string;
        /**
         * Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        from_date?: string;
        /**
         * Page Number, the pages are starting from 1
         */
        page_number: number;
        /**
         * Page size for pagination. The maximum page size value is obtained from P and L report metadata API.
         */
        page_size: number;
        /**
         * Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
         */
        segment: string;
        /**
         * Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        to_date?: string;
    };
};

export type GetTradeWiseProfitAndLossDataResponse2 = GetTradeWiseProfitAndLossDataResponse;

export type GetTradeWiseProfitAndLossDataError = ApiGatewayErrorResponse;

export type GetProfitAndLossChargesData = {
    query: {
        /**
         * Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122
         */
        financial_year: string;
        /**
         * Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        from_date?: string;
        /**
         * Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives
         */
        segment: string;
        /**
         * Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format
         */
        to_date?: string;
    };
};

export type GetProfitAndLossChargesResponse2 = GetProfitAndLossChargesResponse;

export type GetProfitAndLossChargesError = ApiGatewayErrorResponse;

export type GetOptionContractsData = {
    query: {
        /**
         * Expiry date in format: YYYY-mm-dd
         */
        expiry_date?: string;
        /**
         * Instrument key for an underlying symbol
         */
        instrument_key: string;
    };
};

export type GetOptionContractsResponse = GetOptionContractResponse;

export type GetOptionContractsError = ApiGatewayErrorResponse;

export type GetPutCallOptionChainData = {
    query: {
        /**
         * Expiry date in format: YYYY-mm-dd
         */
        expiry_date: string;
        /**
         * Instrument key for an underlying symbol
         */
        instrument_key: string;
    };
};

export type GetPutCallOptionChainResponse = GetOptionChainResponse;

export type GetPutCallOptionChainError = ApiGatewayErrorResponse;

export type GetExchangeTimingsData = {
    path: {
        date: string;
    };
};

export type GetExchangeTimingsResponse = GetExchangeTimingResponse;

export type GetExchangeTimingsError = ApiGatewayErrorResponse;

export type GetMarketStatusData = {
    path: {
        exchange: string;
    };
};

export type GetMarketStatusResponse2 = GetMarketStatusResponse;

export type GetMarketStatusError = ApiGatewayErrorResponse;

export type GetHolidaysResponse = GetHolidayResponse;

export type GetHolidaysError = ApiGatewayErrorResponse;

export type GetHolidayData = {
    path: {
        date: string;
    };
};

export type GetHolidayResponse2 = GetHolidayResponse;

export type GetHolidayError = ApiGatewayErrorResponse;

export type GetFullMarketQuoteData = {
    query?: {
        /**
         * Comma separated list of instrument keys
         */
        instrument_key?: string;
        /**
         * Comma separated list of symbols
         * @deprecated
         */
        symbol?: string;
    };
};

export type GetFullMarketQuoteResponse2 = GetFullMarketQuoteResponse;

export type GetFullMarketQuoteError = ApiGatewayErrorResponse;

export type GetMarketQuoteOhlcData = {
    query: {
        /**
         * Comma separated list of instrument keys
         */
        instrument_key?: string;
        /**
         * Interval to get ohlc data
         */
        interval: string;
        /**
         * Comma separated list of symbols
         * @deprecated
         */
        symbol?: string;
    };
};

export type GetMarketQuoteOhlcResponse = GetMarketQuoteOHLCResponse;

export type GetMarketQuoteOhlcError = ApiGatewayErrorResponse;

export type LtpData = {
    query?: {
        /**
         * Comma separated list of instrument keys
         */
        instrument_key?: string;
        /**
         * Comma separated list of symbols
         * @deprecated
         */
        symbol?: string;
    };
};

export type LtpResponse = GetMarketQuoteLastTradedPriceResponse;

export type LtpError = ApiGatewayErrorResponse;

export type GetHistoricalCandleDataData = {
    path: {
        instrumentKey: string;
        interval: string;
        to_date: string;
    };
};

export type GetHistoricalCandleDataResponse = GetHistoricalCandleResponse;

export type GetHistoricalCandleDataError = ApiGatewayErrorResponse;

export type GetHistoricalCandleData1Data = {
    path: {
        from_date: string;
        instrumentKey: string;
        interval: string;
        to_date: string;
    };
};

export type GetHistoricalCandleData1Response = GetHistoricalCandleResponse;

export type GetHistoricalCandleData1Error = ApiGatewayErrorResponse;

export type GetIntraDayCandleDataData = {
    path: {
        instrumentKey: string;
        interval: string;
    };
};

export type GetIntraDayCandleDataResponse = GetIntraDayCandleResponse;

export type GetIntraDayCandleDataError = ApiGatewayErrorResponse;

export type GetPortfolioStreamFeedData = {
    query?: {
        /**
         * Identifiers separated by commas denote the types of updates to receive.
         */
        update_types?: string;
    };
};

export type GetPortfolioStreamFeedAuthorizeData = {
    query?: {
        /**
         * Identifiers separated by commas denote the types of updates to receive.
         */
        update_types?: string;
    };
};

export type GetPortfolioStreamFeedAuthorizeResponse = WebsocketAuthRedirectResponse;

export type GetPortfolioStreamFeedAuthorizeError = ApiGatewayErrorResponse;

export type GetMarketDataFeedAuthorizeResponse = WebsocketAuthRedirectResponse;

export type GetMarketDataFeedAuthorizeError = ApiGatewayErrorResponse;

export type GetTradeHistory1Data = {
    query: {
        /**
         * Date till which history needs needs to be fetched. Date in YYYY-mm-dd format
         */
        end_date: string;
        /**
         * Page number for which you want to fetch trade history
         */
        page_number: number;
        /**
         * How many records you want for a page
         */
        page_size: number;
        /**
         * Segment for which data is requested can be from the following options EQ - Equity, FO - Futures and Options, COM - Commodity, CD - Currency Derivatives MF - Mutual Funds
         */
        segment?: string;
        /**
         * Date from which trade history needs to be fetched. Date in YYYY-mm-dd format
         */
        start_date: string;
    };
};

export type GetTradeHistory1Response = TradeHistoryResponse;

export type GetTradeHistory1Error = ApiGatewayErrorResponse;

export type GetBrokerageData = {
    query: {
        /**
         * Key of the instrument
         */
        instrument_token: string;
        /**
         * Price with which the order is to be placed
         */
        price: number;
        /**
         * Product with which the order is to be placed
         */
        product: string;
        /**
         * Quantity with which the order is to be placed
         */
        quantity: number;
        /**
         * Indicates whether its a BUY or SELL order
         */
        transaction_type: string;
    };
};

export type GetBrokerageResponse2 = GetBrokerageResponse;

export type GetBrokerageError = ApiGatewayErrorResponse;

export type $OpenApiTs = {
    '/v2/portfolio/convert-position': {
        put: {
            req: ConvertPositionsData;
            res: {
                /**
                 * Successful
                 */
                '200': ConvertPositionResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Authorization Failure
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/portfolio/short-term-positions': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetPositionResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Authorization Failure
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/portfolio/long-term-holdings': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetHoldingsResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Authorization Failure
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/modify': {
        put: {
            req: ModifyOrderData2;
            res: {
                /**
                 * Successful
                 */
                '200': ModifyOrderResponse;
                /**
                 * UDAPI100010 - Unknown order id | order request rejected
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/place': {
        post: {
            req: PlaceOrderData2;
            res: {
                /**
                 * Successful
                 */
                '200': PlaceOrderResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/trades': {
        get: {
            req: GetTradesByOrderData;
            res: {
                /**
                 * Successful
                 */
                '200': GetTradeResponse;
                /**
                 * UDAPI1010 - Order id accepts only alphanumeric characters and '-'.<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/trades/get-trades-for-day': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetTradeResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/retrieve-all': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetOrderBookResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/history': {
        get: {
            req: GetOrderDetailsData;
            res: {
                /**
                 * Successful
                 */
                '200': GetOrderResponse;
                /**
                 * UDAPI1010 - Order id accepts only alphanumeric characters and '-'<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/order/cancel': {
        delete: {
            req: CancelOrderData2;
            res: {
                /**
                 * Successful
                 */
                '200': CancelOrderResponse;
                /**
                 * UDAPI1010 - Order id accepts only alphanumeric characters and '-'.<br>UDAPI1023 - Order id is required<br>UDAPI100010 - Unknown order id | order request rejected
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/login/authorization/token': {
        post: {
            req: TokenData;
            res: {
                /**
                 * Successful
                 */
                '200': TokenResponse;
                /**
                 * UDAPI1017 - API Key is required <br/>UDAPI1018 - Redirect URI is required <br/>UDAPI1022 - Code is required <br/>UDAPI1023 - Grant type is required <br/>UDAPI1024 - App Secret is required <br/>
                 */
                '400': ApiGatewayErrorResponse;
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/login/authorization/dialog': {
        get: {
            req: AuthorizeData;
            res: {
                /**
                 * Successful Operation
                 */
                '302': unknown;
                /**
                 * UDAPI1018 - Redirect URI is required
                 */
                '400': ApiGatewayErrorResponse;
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/auth/auto-login': {
        get: {
            req: AutoLoginData;
            res: {
                /**
                 * Found
                 */
                '302': {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/logout': {
        delete: {
            res: {
                /**
                 * Successful
                 */
                '200': LogoutResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Authorization Failure
                 */
                '401': OAuthClientException;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/user/profile': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetProfileResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/user/get-funds-and-margin': {
        get: {
            req: GetUserFundMarginData;
            res: {
                /**
                 * Successful
                 */
                '200': GetUserFundMarginResponse;
                /**
                 * UDAPI1019 - segment is invalid
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/trade/profit-loss/metadata': {
        get: {
            req: GetTradeWiseProfitAndLossMetaDataData;
            res: {
                /**
                 * Successful
                 */
                '200': GetTradeWiseProfitAndLossMetaDataResponse;
                /**
                 * UDAPI1070 - The financial_year is required<br>UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1073 - Financial year should have max length of 4<br>UDAPI1068 - The start_date is required<br>UDAPI1069 - The end_date is required
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/trade/profit-loss/data': {
        get: {
            req: GetTradeWiseProfitAndLossDataData;
            res: {
                /**
                 * Successful
                 */
                '200': GetTradeWiseProfitAndLossDataResponse;
                /**
                 * UDAPI1070 - The financial_year is required<br>UDAPI1071 - The page_number is required<br>UDAPI1072 - The page_size is required<br>UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1073 - Financial year should have max length of 4
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/trade/profit-loss/charges': {
        get: {
            req: GetProfitAndLossChargesData;
            res: {
                /**
                 * Successful
                 */
                '200': GetProfitAndLossChargesResponse;
                /**
                 * UDAPI1067 - The ''segment'' is required<br>UDAPI1066 - The ''segment'' is invalid<br>UDAPI1068 - The start_date is required<br>UDAPI1069 - The end_date is required
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/option/contract': {
        get: {
            req: GetOptionContractsData;
            res: {
                /**
                 * Successful
                 */
                '200': GetOptionContractResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/option/chain': {
        get: {
            req: GetPutCallOptionChainData;
            res: {
                /**
                 * Successful
                 */
                '200': GetOptionChainResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market/timings/{date}': {
        get: {
            req: GetExchangeTimingsData;
            res: {
                /**
                 * Successful
                 */
                '200': GetExchangeTimingResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market/status/{exchange}': {
        get: {
            req: GetMarketStatusData;
            res: {
                /**
                 * Successful
                 */
                '200': GetMarketStatusResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market/holidays': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': GetHolidayResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market/holidays/{date}': {
        get: {
            req: GetHolidayData;
            res: {
                /**
                 * Successful
                 */
                '200': GetHolidayResponse;
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market-quote/quotes': {
        get: {
            req: GetFullMarketQuoteData;
            res: {
                /**
                 * Successful
                 */
                '200': GetFullMarketQuoteResponse;
                /**
                 * UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market-quote/ohlc': {
        get: {
            req: GetMarketQuoteOhlcData;
            res: {
                /**
                 * Successful
                 */
                '200': GetMarketQuoteOHLCResponse;
                /**
                 * UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI1027 - interval is required<br>UDAPI1028 - Invalid interval<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/market-quote/ltp': {
        get: {
            req: LtpData;
            res: {
                /**
                 * Successful
                 */
                '200': GetMarketQuoteLastTradedPriceResponse;
                /**
                 * UDAPI1009 - symbol is required<br>UDAPI1011 - symbol is of invalid format<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}': {
        get: {
            req: GetHistoricalCandleDataData;
            res: {
                /**
                 * Successful
                 */
                '200': GetHistoricalCandleResponse;
                /**
                 * UDAPI1015 - to_date must be greater than or equal to from_date and Date should be in valid format: yyyy-mm-dd<br>UDAPI1020 - Interval accepts one of (1minute,30minute,day,week,month)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI1022 - to_date is required<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}/{from_date}': {
        get: {
            req: GetHistoricalCandleData1Data;
            res: {
                /**
                 * Successful
                 */
                '200': GetHistoricalCandleResponse;
                /**
                 * UDAPI1015 - to_date must be greater than or equal to from_date and Date should be in valid format: yyyy-mm-dd<br>UDAPI1020 - Interval accepts one of (1minute,30minute,day,week,month)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI1022 - to_date is required<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/historical-candle/intraday/{instrumentKey}/{interval}': {
        get: {
            req: GetIntraDayCandleDataData;
            res: {
                /**
                 * Successful
                 */
                '200': GetIntraDayCandleResponse;
                /**
                 * UDAPI1076 - Interval accepts one of (1minute,30minute)<br>UDAPI1021 - Instrument key is of invalid format<br>UDAPI100011 - Invalid Instrument key
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/feed/portfolio-stream-feed': {
        get: {
            req: GetPortfolioStreamFeedData;
            res: {
                /**
                 * Location for authorized access of portfolio stream feed
                 */
                '302': unknown;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/feed/portfolio-stream-feed/authorize': {
        get: {
            req: GetPortfolioStreamFeedAuthorizeData;
            res: {
                /**
                 * Successful
                 */
                '200': WebsocketAuthRedirectResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/feed/market-data-feed': {
        get: {
            res: {
                /**
                 * Location for authorized access of market data feed
                 */
                '302': unknown;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/feed/market-data-feed/authorize': {
        get: {
            res: {
                /**
                 * Successful
                 */
                '200': WebsocketAuthRedirectResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/charges/historical-trades': {
        get: {
            req: GetTradeHistory1Data;
            res: {
                /**
                 * OK
                 */
                '200': TradeHistoryResponse;
                /**
                 * Bad Request
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
    '/v2/charges/brokerage': {
        get: {
            req: GetBrokerageData;
            res: {
                /**
                 * Successful
                 */
                '200': GetBrokerageResponse;
                /**
                 * UDAPI1060 - The quantity is required<br>UDAPI1061 - The price is required<br>UDAPI1062 - The transaction_type is required<br> UDAPI1063 - The product is required<br> UDAPI1064 - The quantity cannot be zero<br>UDAPI1065 - The price cannot be zero<br>UDAPI1059 - The instrument_token is of invalid format
                 */
                '400': ApiGatewayErrorResponse;
                /**
                 * Unauthorized
                 */
                '401': ApiGatewayErrorResponse;
                /**
                 * Method Not Allowed
                 */
                '405': ApiGatewayErrorResponse;
                /**
                 * Locked
                 */
                '423': ApiGatewayErrorResponse;
                /**
                 * Too Many Requests
                 */
                '429': ApiGatewayErrorResponse;
                /**
                 * Internal Server Error
                 */
                '500': ApiGatewayErrorResponse;
            };
        };
    };
};